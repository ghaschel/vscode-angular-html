{
  repository: {
    identifiers: {
      patterns: [
        {
          name: "support.class.ts",
          match: "([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\\.\\s*prototype\\b(?!\\$))",
        },
        {
          match: "(?x)(\\?\\.|\\!\\.|\\.)\\s*(?:\n  ([[:upper:]][_$[:digit:][:upper:]]*) |\n  ([_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)",
          captures: {
            "1": {
              name: "punctuation.accessor.ts",
            },
            "2": {
              name: "constant.other.object.property.ts",
            },
            "3": {
              name: "variable.other.object.property.ts",
            },
          },
        },
        {
          match: "(?x)(?:(\\?\\.|\\!\\.|\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*=\\s*( (async\\s+)|(function\\s*[(<])|(function\\s+)| ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)| ((<([^<>]|\\<[^<>]+\\>)+>\\s*)?\\(([^()]|\\([^()]*\\))*\\)(\\s*:\\s*(.)*)?\\s*=>)))",
          captures: {
            "1": {
              name: "punctuation.accessor.ts",
            },
            "2": {
              name: "entity.name.function.ts",
            },
          },
        },
        {
          match: "(\\?\\.|\\!\\.|\\.)\\s*([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])",
          captures: {
            "1": {
              name: "punctuation.accessor.ts",
            },
            "2": {
              name: "constant.other.property.ts",
            },
          },
        },
        // {
        //   match: "(\\?\\.|\\!\\.|\\.)\\s*([_$[:alpha:]][_$[:alnum:]]*)",
        //   captures: {
        //     "1": {
        //       name: "punctuation.accessor.ts",
        //     },
        //     "2": {
        //       name: "variable.other.property.ts",
        //     },
        //   },
        // },
        {
          match: "(?x)(?:\n  ([[:upper:]][_$[:digit:][:upper:]]*) |\n  ([_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)",
          captures: {
            "1": {
              name: "constant.other.object.ts",
            },
            "2": {
              name: "variable.other.object.ts",
            },
          },
        },
        {
          name: "constant.character.other",
          match: "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])",
        },
        {
          name: "variable.other.property.ts",
          match: "[_$[:alpha:]][_$[:alnum:]]*",
        },
      ],
    },
  },
}
