{
  repository: {
    'expression-operators': {
      patterns: [
        {
          match: '((?<!\\|)(\\|)(?!\\|))\\s?([a-zA-Z0-9\\-\\_]*)',
          captures: {
            '2': {
              name: 'keyword.operator.logical.ts',
            },
            '3': {
              name: 'entity.name.function.pipe.ng',
            },
          },
        },
        {
          name: 'keyword.control.flow.ts',
          match: '(?<!\\.|\\$)\\b(await)\\b(?!\\$)',
        },
        {
          name: 'keyword.operator.expression.delete.ts',
          match: '(?<!\\.|\\$)\\bdelete\\b(?!\\$)',
        },
        {
          name: 'keyword.operator.expression.in.ts',
          match: '(?<!\\.|\\$)\\bin\\b(?!\\$)',
        },
        {
          name: 'keyword.operator.expression.of.ts',
          match: '(?<!\\.|\\$)\\bof\\b(?!\\$)',
        },
        {
          name: 'keyword.control.else.ts',
          match: '(?<!\\.|\\$)\\belse\\b(?!\\$)',
        },
        {
          name: 'keyword.control.then.ts',
          match: '(?<!\\.|\\$)\\bthen\\b(?!\\$)',
        },
        {
          name: 'keyword.operator.expression.instanceof.ts',
          match: '(?<!\\.|\\$)\\binstanceof\\b(?!\\$)',
        },
        {
          name: 'keyword.operator.new.ts',
          match: '(?<!\\.|\\$)\\bnew\\b(?!\\$)',
        },
        {
          include: '#typeof-operator',
        },
        {
          name: 'keyword.operator.expression.void.ts',
          match: '(?<!\\.|\\$)\\bvoid\\b(?!\\$)',
        },
        {
          begin: '(?<!\\.|\\$)\\bas\\b(?!\\$)',
          beginCaptures: {
            '0': {
              name: 'keyword.control.as.ts',
            },
          },
          end: '(?=$|"|[;,:})\\]])',
          patterns: [
            {
              include: '#type',
            },
          ],
        },
        {
          name: 'keyword.operator.assignment.compound.ts',
          match: '\\*=|(?<!\\()/=|%=|\\+=|\\-=',
        },
        {
          name: 'keyword.operator.assignment.compound.bitwise.ts',
          match: '\\&=|\\^=|<<=|>>=|>>>=|\\|=',
        },
        {
          name: 'keyword.operator.bitwise.shift.ts',
          match: '<<|>>>|>>',
        },
        {
          name: 'keyword.operator.comparison.ts',
          match: '===|!==|==|!=',
        },
        {
          name: 'keyword.operator.relational.ts',
          match: '<=|>=|<>|<|>',
        },
        {
          name: 'keyword.operator.logical.ts',
          match: '\\!|&&|\\|\\|',
        },
        {
          name: 'keyword.operator.bitwise.ts',
          match: '\\&|~|\\^|\\|',
        },
        {
          name: 'keyword.operator.assignment.ts',
          match: '\\=',
        },
        {
          name: 'keyword.operator.decrement.ts',
          match: '--',
        },
        {
          name: 'keyword.operator.increment.ts',
          match: '\\+\\+',
        },
        {
          name: 'keyword.operator.arithmetic.ts',
          match: '%|\\*|/|-|\\+',
        },
        {
          match: '(?<=[_$[:alnum:]])\\s*(/)(?![/*])',
          captures: {
            '1': {
              name: 'keyword.operator.arithmetic.ts',
            },
          },
        },
      ],
    },
  },
}
