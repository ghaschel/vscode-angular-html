{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "angular-html",
  "scopeName": "html-template.ng",
  "patterns": [
    {
      "include": "#angular-interpolations"
    },
    {
      "include": "#tag-svg"
    },
    {
      "include": "#tag-script"
    },
    {
      "include": "#tag-style"
    },
    {
      "include": "#tag-deprecated-attribute-area"
    },
    {
      "include": "#tag-deprecated-attribute-a"
    },
    {
      "include": "#tag-deprecated-attribute-body"
    },
    {
      "include": "#tag-deprecated-attribute-br"
    },
    {
      "include": "#tag-deprecated-attribute-caption"
    },
    {
      "include": "#tag-deprecated-attribute-colgroup"
    },
    {
      "include": "#tag-deprecated-attribute-col"
    },
    {
      "include": "#tag-deprecated-attribute-div"
    },
    {
      "include": "#tag-deprecated-attribute-dl"
    },
    {
      "include": "#tag-deprecated-attribute-h1"
    },
    {
      "include": "#tag-deprecated-attribute-h2"
    },
    {
      "include": "#tag-deprecated-attribute-h3"
    },
    {
      "include": "#tag-deprecated-attribute-h4"
    },
    {
      "include": "#tag-deprecated-attribute-h5"
    },
    {
      "include": "#tag-deprecated-attribute-h6"
    },
    {
      "include": "#tag-deprecated-attribute-head"
    },
    {
      "include": "#tag-deprecated-attribute-hr"
    },
    {
      "include": "#tag-deprecated-attribute-html"
    },
    {
      "include": "#tag-deprecated-attribute-iframe"
    },
    {
      "include": "#tag-deprecated-attribute-img"
    },
    {
      "include": "#tag-deprecated-attribute-input"
    },
    {
      "include": "#tag-deprecated-attribute-legend"
    },
    {
      "include": "#tag-deprecated-attribute-link"
    },
    {
      "include": "#tag-deprecated-attribute-li"
    },
    {
      "include": "#tag-deprecated-attribute-menu"
    },
    {
      "include": "#tag-deprecated-attribute-object"
    },
    {
      "include": "#tag-deprecated-attribute-ol"
    },
    {
      "include": "#tag-deprecated-attribute-param"
    },
    {
      "include": "#tag-deprecated-attribute-pre"
    },
    {
      "include": "#tag-deprecated-attribute-p"
    },
    {
      "include": "#tag-deprecated-attribute-table"
    },
    {
      "include": "#tag-deprecated-attribute-tbody"
    },
    {
      "include": "#tag-deprecated-attribute-td"
    },
    {
      "include": "#tag-deprecated-attribute-tfoot"
    },
    {
      "include": "#tag-deprecated-attribute-thead"
    },
    {
      "include": "#tag-deprecated-attribute-th"
    },
    {
      "include": "#tag-deprecated-attribute-tr"
    },
    {
      "include": "#tag-deprecated-attribute-ul"
    },
    {
      "include": "#tag-deprecated-other"
    },
    {
      "include": "#tag-deprecated-inline"
    },
    {
      "include": "#tag-deprecated-metadata-void"
    },
    {
      "include": "#tag-deprecated-object-void"
    },
    {
      "include": "#tag-deprecated-object"
    },
    {
      "include": "#tag-deprecated-structure"
    },
    {
      "include": "#tag-definition-angular"
    },
    {
      "include": "#tag-definition-primeng"
    },
    {
      "include": "#tag-definition-custom"
    },
    {
      "include": "#tag-definition-structure"
    },
    {
      "include": "#tag-definition-object"
    },
    {
      "include": "#tag-definition-object-void"
    },
    {
      "include": "#tag-definition-metadata"
    },
    {
      "include": "#tag-definition-metadata-void"
    },
    {
      "include": "#tag-definition-inline"
    },
    {
      "include": "#tag-definition-inline-void"
    },
    {
      "include": "#regex"
    },
    {
      "include": "#comment"
    },
    {
      "include": "#doctype"
    },
    {
      "include": "#xml-stylesheet-processing"
    },
    {
      "include": "#xml-processing"
    },
    {
      "include": "#cdata"
    },
    {
      "include": "#entities"
    }
  ],
  "repository": {
    "tag-stuff": {
      "patterns": [
        {
          "include": "#generic-style-attribute"
        },
        {
          "include": "#tag-double-way-non-standard"
        },
        {
          "include": "#tag-double-way-standard"
        },
        {
          "include": "#tag-input-binding"
        },
        {
          "include": "#tag-event-handler"
        },
        {
          "include": "#tag-sugar-attributes"
        },
        {
          "include": "#tag-boolean-sugar-attributes"
        },
        {
          "include": "#tag-annimation-trigger"
        },
        {
          "include": "#tag-template-variable"
        },
        {
          "include": "#tag-boolean-template-variable"
        },
        {
          "include": "#tag-alt-template-variable"
        },
        {
          "include": "#tag-template-input-variable"
        },
        {
          "include": "#tag-boolean-alt-template-variable"
        },
        {
          "include": "#tag-boolean-template-input-variable"
        },
        {
          "include": "#tag-generic-attribute"
        },
        {
          "include": "#tag-events-attribute"
        },
        {
          "include": "#string-double-quoted-capture"
        },
        {
          "include": "#tag-minified-boolean-attributes"
        }
      ]
    },
    "cdata": {
      "begin": "<!\\[CDATA\\[",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.tag.begin.html"
        }
      },
      "contentName": "string.other.inline-data.html",
      "end": "]]>",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "name": "meta.tag.metadata.cdata.html"
    },
    "regex": {
      "name": "string.regexp.ts",
      "begin": "\\/(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)*\\])+\\/([dgimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.ts"
        }
      },
      "end": "(/)([dgimsuy]*)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.ts"
        },
        "2": {
          "name": "keyword.other.ts"
        }
      },
      "patterns": [
        {
          "include": "source.ts#regexp"
        }
      ]
    },
    "string-double-quoted-capture-between": {
      "begin": "(?<=\")",
      "end": "(?=\")",
      "name": "string.quoted.double.html",
      "patterns": [
        {
          "include": "#angular-interpolations"
        },
        {
          "include": "#entities"
        }
      ]
    },
    "string-double-quoted-capture": {
      "begin": "(\")",
      "beginCaptures": {
        "0": {
          "name": "string.quoted.double.html"
        }
      },
      "end": "(\")",
      "endCaptures": {
        "0": {
          "name": "string.quoted.double.html"
        }
      },
      "patterns": [
        {
          "begin": "(?<=\")",
          "end": "(?=\")",
          "patterns": [
            {
              "match": "([[:alpha:]0-9\\s\\-_&$@\\#\\%\\^\\;\\+\\*!?()\\[\\]:\\/\\\\\\.\\,-]+)(?![^{]*\\})",
              "name": "string.quoted.double.html"
            },
            {
              "include": "#angular-interpolations"
            },
            {
              "include": "#entities"
            }
          ]
        }
      ]
    },
    "string-double-quoted": {
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.html"
        }
      },
      "patterns": [
        {
          "include": "#angular-interpolations"
        },
        {
          "include": "#entities"
        }
      ],
      "begin": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.html"
        }
      },
      "end": "\"",
      "name": "string.quoted.double.html"
    },
    "tag-alt-template-variable": {
      "beginCaptures": {
        "0": {
          "name": "meta.ng-binding.template.variable.alt.html"
        },
        "1": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.prefix.ref"
        },
        "2": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.suffix.name"
        },
        "3": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.suffix.rxjs"
        },
        "4": {
          "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
        },
        "5": {
          "name": "string.quoted.double.html"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.ng-binding.template.variable.alt.html"
        },
        "1": {
          "name": "string.quoted.double.html"
        }
      },
      "begin": "(ref\\-)\\b([\\w\\-\\_]+)([$]*)(=)(\")",
      "end": "(\")",
      "patterns": [
        {
          "include": "#angular-expression"
        }
      ]
    },
    "tag-annimation-trigger": {
      "captures": {
        "0": {
          "name": "meta.ng-animation-trigger.property.html"
        },
        "1": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.animationtrigger.prefix"
        },
        "2": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.animationtrigger.variable"
        },
        "3": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.suffix.rxjs"
        }
      },
      "match": "(?<!\\[|\\()(@)\\b([\\w\\-\\_]+)([$]*)(?!=)[\\s]?"
    },
    "tag-boolean-alt-template-variable": {
      "captures": {
        "0": {
          "name": "meta.ng-binding.template.variable.boolean.alt.html"
        },
        "1": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.prefix.ref"
        },
        "2": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.suffix.name"
        },
        "3": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.suffix.rxjs"
        }
      },
      "match": "(ref\\-)\\b([\\w\\-\\_]+)([$]*)(?!=)[\\s]?"
    },
    "tag-boolean-sugar-attributes": {
      "captures": {
        "0": {
          "name": "meta.ng-binding.template.sugar.boolean.html"
        },
        "1": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.prefix.sugar"
        },
        "2": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.suffix.sugar"
        },
        "3": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.suffix.rxjs"
        }
      },
      "match": "(\\*)([\\w\\-\\_]+)?([$]*)?(?!=)[\\s]?"
    },
    "tag-boolean-template-input-variable": {
      "captures": {
        "0": {
          "name": "meta.ng-binding.template.input.variable.boolean.html"
        },
        "1": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.prefix.let"
        },
        "2": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.suffix.name"
        },
        "3": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.suffix.rxjs"
        }
      },
      "match": "(let\\-)\\b([\\w\\-\\_]+)([$]*)(?!=)[\\s]?"
    },
    "tag-boolean-template-variable": {
      "captures": {
        "0": {
          "name": "meta.ng-binding.template.variable.boolean.html"
        },
        "1": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.template.prefix"
        },
        "2": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.template.variable"
        },
        "3": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.suffix.rxjs"
        }
      },
      "match": "(#)\\b([\\w\\-\\_]+)([$]*)(?!=)[\\s]?"
    },
    "tag-double-way-non-standard": {
      "captures": {
        "0": {
          "name": "meta.ng-binding.two-way-non-standard.html entity.other.attribute-name.html"
        },
        "1": {
          "name": "entity.other.ng-binding-name.property.html entity.other.ng-binding-name.two-way.html punctuation.definition.ng-binding-name.begin.html"
        },
        "2": {
          "name": "entity.other.ng-binding-name.property.html entity.other.ng-binding-name.two-way.html html-template.ng.attributes.input-binding.animationTrigger.prefix"
        },
        "3": {
          "name": "entity.other.ng-binding-name.property.html entity.other.ng-binding-name.two-way.html\tentity.other.ng-binding-name.$3.html html-template.ng.attributes.input-binding.first-level"
        },
        "4": {
          "name": "entity.other.ng-binding-name.property.html entity.other.ng-binding-name.two-way.html\tentity.other.ng-binding-name.$4.html html-template.ng.attributes.input-binding.second-level"
        },
        "5": {
          "name": "entity.other.ng-binding-name.property.html entity.other.ng-binding-name.two-way.html\tentity.other.ng-binding-name.$5.html html-template.ng.attributes.input-binding.third-level"
        },
        "6": {
          "name": "entity.other.ng-binding-name.property.html entity.other.ng-binding-name.two-way.html punctuation.definition.ng-binding-name.end.html"
        },
        "7": {
          "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
        },
        "8": {
          "name": "string.quoted.double.html"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.ng-binding.two-way-non-standard.html"
        },
        "1": {
          "name": "string.quoted.double.html"
        }
      },
      "begin": "(?<!\\()(\\(\\[)(@)?([a-zA-Z0-9\\-_\\$]+)(?:[\\:\\.]([a-zA-Z0-9\\-_\\%]+))?(?:\\.([a-zA-Z0-9\\-_\\%]+))*(\\]\\))(=)(\")",
      "end": "(\")",
      "patterns": [
        {
          "include": "#angular-expression"
        }
      ]
    },
    "tag-double-way-standard": {
      "captures": {
        "0": {
          "name": "meta.ng-binding.two-way.html entity.other.attribute-name.html"
        },
        "1": {
          "name": "entity.other.ng-binding-name.property.html entity.other.ng-binding-name.two-way.html punctuation.definition.ng-binding-name.begin.html"
        },
        "2": {
          "name": "entity.other.ng-binding-name.property.html entity.other.ng-binding-name.two-way.html html-template.ng.attributes.input-binding.animationTrigger.prefix"
        },
        "3": {
          "name": "entity.other.ng-binding-name.property.html entity.other.ng-binding-name.two-way.html\tentity.other.ng-binding-name.$3.html html-template.ng.attributes.input-binding.first-level"
        },
        "4": {
          "name": "entity.other.ng-binding-name.property.html entity.other.ng-binding-name.two-way.html\tentity.other.ng-binding-name.$4.html html-template.ng.attributes.input-binding.second-level"
        },
        "5": {
          "name": "entity.other.ng-binding-name.property.html entity.other.ng-binding-name.two-way.html\tentity.other.ng-binding-name.$5.html html-template.ng.attributes.input-binding.third-level"
        },
        "6": {
          "name": "entity.other.ng-binding-name.property.html entity.other.ng-binding-name.two-way.html punctuation.definition.ng-binding-name.end.html"
        },
        "7": {
          "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
        },
        "8": {
          "name": "string.quoted.double.html"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.ng-binding.two-way.html"
        },
        "1": {
          "name": "string.quoted.double.html"
        }
      },
      "begin": "(?<!\\()(\\[\\()(@)?([a-zA-Z0-9\\-_\\$]+)(?:[\\:\\.]([a-zA-Z0-9\\-_\\%]+))?(?:\\.([a-zA-Z0-9\\-_\\%]+))*(\\)\\])(=)(\")",
      "end": "(\")",
      "patterns": [
        {
          "include": "#angular-expression"
        }
      ]
    },
    "tag-event-handler": {
      "name": "meta.ng-binding.event.html",
      "captures": {
        "0": {
          "name": "meta.ng-binding.event.html"
        },
        "1": {
          "name": "entity.other.attribute-name.html entity.other.ng-binding-name.event.html punctuation.definition.ng-binding-name.begin.html"
        },
        "2": {
          "name": "entity.other.attribute-name.html entity.other.ng-binding-name.event.html\tentity.other.ng-binding-name.$2.html html-template.ng.attributes.event-handler"
        },
        "3": {
          "name": "entity.other.attribute-name.property.html entity.other.ng-binding-name.binding.html\tentity.other.ng-binding-name.$4.html html-template.ng.attributes.input-binding.second-level"
        },
        "4": {
          "name": "entity.other.attribute-name.property.html entity.other.ng-binding-name.binding.html\tentity.other.ng-binding-name.$5.html html-template.ng.attributes.input-binding.third-level"
        },
        "5": {
          "name": "entity.other.attribute-name.html entity.other.ng-binding-name.event.html punctuation.definition.ng-binding-name.end.html"
        },
        "6": {
          "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
        },
        "7": {
          "name": "string.quoted.double.html"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.ng-binding.event.html"
        },
        "1": {
          "name": "string.quoted.double.html"
        }
      },
      "begin": "(?<!\\[)(\\()([a-zA-Z0-9\\-_\\$]+)(?:\\.([a-zA-Z0-9\\-_\\%]+))?(?:\\.([a-zA-Z0-9\\-_\\%]+))*(\\))(=)(\")",
      "end": "(\")",
      "patterns": [
        {
          "include": "#angular-expression"
        }
      ]
    },
    "tag-input-binding": {
      "captures": {
        "0": {
          "name": "meta.ng-binding.property.html entity.other.attribute-name.html"
        },
        "1": {
          "name": "entity.other.ng-binding-name.property.html entity.other.ng-binding-name.binding.html punctuation.definition.ng-binding-name.begin.html"
        },
        "2": {
          "name": "entity.other.ng-binding-name.property.html entity.other.ng-binding-name.binding.html html-template.ng.attributes.input-binding.animationTrigger.prefix"
        },
        "3": {
          "name": "entity.other.ng-binding-name.property.html entity.other.ng-binding-name.binding.html entity.other.ng-binding-name.$3.html html-template.ng.attributes.input-binding.first-level"
        },
        "4": {
          "name": "entity.other.ng-binding-name.property.html entity.other.ng-binding-name.binding.html\tentity.other.ng-binding-name.$4.html html-template.ng.attributes.input-binding.second-level"
        },
        "5": {
          "name": "entity.other.ng-binding-name.property.html entity.other.ng-binding-name.binding.html\tentity.other.ng-binding-name.$5.html html-template.ng.attributes.input-binding.third-level"
        },
        "6": {
          "name": "entity.other.ng-binding-name.property.html entity.other.ng-binding-name.binding.html punctuation.definition.ng-binding-name.end.html"
        },
        "7": {
          "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
        },
        "8": {
          "name": "string.quoted.double.html"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.ng-binding.property.html"
        },
        "1": {
          "name": "string.quoted.double.html"
        }
      },
      "begin": "(?<!\\()(\\[)(@)?([a-zA-Z0-9\\-_\\$]+)(?:\\.([a-zA-Z0-9\\-_\\%]+))?(?:\\.([a-zA-Z0-9\\-_\\%]+))*(\\])(=)(\")",
      "end": "(\")",
      "patterns": [
        {
          "include": "#angular-expression"
        }
      ]
    },
    "tag-sugar-attributes": {
      "beginCaptures": {
        "0": {
          "name": "meta.ng-binding.template.sugar.html"
        },
        "1": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.prefix.sugar"
        },
        "2": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.suffix.sugar"
        },
        "3": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.suffix.rxjs"
        },
        "4": {
          "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
        },
        "5": {
          "name": "string.quoted.double.html"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.ng-binding.template.sugar.html"
        },
        "1": {
          "name": "string.quoted.double.html"
        }
      },
      "begin": "(\\*)\\b([\\w\\-\\_]+)([$]*)(=)(\")",
      "end": "(\")",
      "patterns": [
        {
          "include": "#angular-expression"
        }
      ]
    },
    "tag-template-input-variable": {
      "beginCaptures": {
        "0": {
          "name": "meta.ng-binding.template.input.variable.html"
        },
        "1": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.prefix.let"
        },
        "2": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.suffix.name"
        },
        "3": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.suffix.rxjs"
        },
        "4": {
          "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
        },
        "5": {
          "name": "string.quoted.double.html"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.ng-binding.template.variable.alt.html"
        },
        "1": {
          "name": "string.quoted.double.html"
        }
      },
      "begin": "(let\\-)\\b([\\w\\-\\_]+)([$]*)(=)(\")",
      "end": "(\")",
      "patterns": [
        {
          "include": "#angular-expression"
        }
      ]
    },
    "tag-template-variable": {
      "captures": {
        "0": {
          "name": "meta.ng-binding.template.variable.html"
        },
        "1": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.template.prefix"
        },
        "2": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.template.variable"
        },
        "3": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.suffix.rxjs"
        },
        "4": {
          "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
        },
        "5": {
          "name": "string.quoted.double.html"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.ng-binding.template.variable.html"
        },
        "1": {
          "name": "string.quoted.double.html"
        }
      },
      "begin": "(#)\\b([\\w\\-\\_]+)([$]*)(=)(\")",
      "end": "(\")",
      "patterns": [
        {
          "include": "#angular-expression"
        }
      ]
    },
    "generic-style-attribute": {
      "name": "meta.property-list.scss",
      "beginCaptures": {
        "0": {
          "name": "meta.attribute.style.html"
        },
        "1": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.generic"
        },
        "2": {
          "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
        },
        "3": {
          "name": "string.quoted.double.html"
        }
      },
      "endCaptures": {
        "1": {
          "name": "string.quoted.double.html"
        }
      },
      "begin": "(?<!\\S)(?!(?:ref|let)?-)(?<!\\*|\\#)\\b(style)+\\b(=)(\")",
      "end": ".?(\")",
      "patterns": [
        {
          "begin": "(?<![-a-z]|\\(|, |:)(?=[-a-z])",
          "end": "$|(?![-a-z])",
          "name": "meta.embeded.line.css meta.property-name.scss",
          "patterns": [
            {
              "match": "\\b(source|scroll-offsets|syntax|initialvalue|inherits)\\b",
              "name": "support.type.property-name.css"
            },
            {
              "include": "source.css#property-names"
            }
          ]
        },
        {
          "begin": "(:)\\s*(?!(\\s*{))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.separator.key-value.scss"
            }
          },
          "end": "\\s*(;|(?=\"|\\)))",
          "endCaptures": {
            "1": {
              "name": "punctuation.terminator.rule.scss"
            }
          },
          "contentName": "meta.property-value.scss",
          "patterns": [
            {
              "match": "\\b(false|true)\\b",
              "name": "constant.language.boolean.css"
            },
            {
              "begin": "\\b(selector)(\\()",
              "beginCaptures": {
                "1": {
                  "name": "support.function.misc.scss"
                },
                "2": {
                  "name": "punctuation.section.function.scss"
                }
              },
              "end": "(\\))",
              "endCaptures": {
                "1": {
                  "name": "punctuation.section.function.scss"
                }
              },
              "patterns": [
                {
                  "include": "source.css.scss#selectors"
                }
              ]
            },
            {
              "include": "source.css.scss#general"
            },
            {
              "include": "source.css.scss#property_values"
            }
          ]
        }
      ]
    },
    "tag-events-attribute": {
      "captures": {
        "0": {
          "name": "meta.attribute.event-handler.$1.html"
        },
        "1": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.events"
        },
        "2": {
          "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
        }
      },
      "begin": "(DOMMenuItemActive|DOMMenuItemInactive|DOMMouseScroll|onabort|onafterprint|onafterupdate|onbeforecopy|onbeforecut|onbeforeeditfocus|onbeforepaste|onbeforeprint|onbeforeunload|onbeforeupdate|onblur|onbounce|onbroadcast|oncancel|oncanplay|oncanplaythrough|oncellchange|onchange|onclick|onclose|oncommandupdate|oncommand|oncontextmenu|oncopy|oncuechange|oncut|ondataavailable|ondatasetchanged|ondatasetcomplete|ondblclick|ondragdrop|ondragend|ondragenter|ondragexit|ondraggesture|ondragleave|ondragover|ondragstart|ondrag|ondrop|ondurationchange|onemptied|onended|onerrorupdate|onerror|onfilterchange|onfinish|onfocus|onformchange|onforminput|ongotpointercapture|onhelp|oninput|oninvalid|onkeydown|onkeypress|onkeyup|onloadeddata|onloadedmetadata|onloadstart|onload|onlosecapture|onlostpointercapture|onmousedown|onmouseenter|onmouseleave|onmousemove|onmouseout|onmouseover|onmouseup|onmousewheel|onoverflowchanged|onoverflow|onpaste|onpause|onplaying|onplay|onpointercancel|onpointerdown|onpointerenter|onpointerleave|onpointermove|onpointerout|onpointerover|onpointerup|onpopuphidden|onpopuphiding|onpopupshowing|onpopupshown|onprogress|onpropertychange|onratechange|onreadystatechange|onreset|onresize|onrowenter|onrowexit|onrowinserted|onrowsdelete|onscroll|onseeked|onseeking|onselectstart|onselect|onshow|onstalled|onstart|onstop|onsubmit|onsuspend|ontimeupdate|ontoggle|onunderflow|onunload|onvolumechange|onwaiting)+(=)",
      "end": "(?<='|\")|(?=[\\s<>`])",
      "patterns": [
        {
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.html"
            },
            "1": {
              "name": "string.quoted.double.html"
            }
          },
          "patterns": [
            {
              "include": "#angular-expression"
            }
          ],
          "begin": "(\")",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.html"
            },
            "1": {
              "name": "string.quoted.double.html"
            }
          },
          "end": "(\")"
        },
        {
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.html"
            },
            "1": {
              "name": "string.quoted.single.html"
            }
          },
          "patterns": [
            {
              "include": "#angular-expression"
            }
          ],
          "begin": "(')",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.html"
            },
            "1": {
              "name": "string.quoted.single.html"
            }
          },
          "end": "(')"
        }
      ]
    },
    "tag-generic-attribute": {
      "beginCaptures": {
        "0": {
          "name": "meta.attribute.$2.html"
        },
        "2": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.generic"
        },
        "3": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.colon"
        },
        "4": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.suffix"
        },
        "5": {
          "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
        },
        "6": {
          "name": "string.quoted.double.html"
        }
      },
      "endCaptures": {
        "1": {
          "name": "string.quoted.double.html"
        }
      },
      "begin": "(?<!\\S)(?!(?:ref|let)?-)(?<!\\*|\\#)(?!(DOMMenuItemActive|DOMMenuItemInactive|DOMMouseScroll|onabort|onafterprint|onafterupdate|onbeforecopy|onbeforecut|onbeforeeditfocus|onbeforepaste|onbeforeprint|onbeforeunload|onbeforeupdate|onblur|onbounce|onbroadcast|oncancel|oncanplay|oncanplaythrough|oncellchange|onchange|onclick|onclose|oncommandupdate|oncommand|oncontextmenu|oncopy|oncuechange|oncut|ondataavailable|ondatasetchanged|ondatasetcomplete|ondblclick|ondragdrop|ondragend|ondragenter|ondragexit|ondraggesture|ondragleave|ondragover|ondragstart|ondrag|ondrop|ondurationchange|onemptied|onended|onerrorupdate|onerror|onfilterchange|onfinish|onfocus|onformchange|onforminput|ongotpointercapture|onhelp|oninput|oninvalid|onkeydown|onkeypress|onkeyup|onloadeddata|onloadedmetadata|onloadstart|onload|onlosecapture|onlostpointercapture|onmousedown|onmouseenter|onmouseleave|onmousemove|onmouseout|onmouseover|onmouseup|onmousewheel|onoverflowchanged|onoverflow|onpaste|onpause|onplaying|onplay|onpointercancel|onpointerdown|onpointerenter|onpointerleave|onpointermove|onpointerout|onpointerover|onpointerup|onpopuphidden|onpopuphiding|onpopupshowing|onpopupshown|onprogress|onpropertychange|onratechange|onreadystatechange|onreset|onresize|onrowenter|onrowexit|onrowinserted|onrowsdelete|onscroll|onseeked|onseeking|onselectstart|onselect|onshow|onstalled|onstart|onstop|onsubmit|onsuspend|ontimeupdate|ontoggle|onunderflow|onunload|onvolumechange|onwaiting|style)\\b)\\b([\\w\\-\\_$]+)(:)?([\\w\\-\\_$]+)?\\b(=)(\")",
      "end": "(\")",
      "patterns": [
        {
          "begin": "(?<=\")",
          "end": "(?=\")",
          "patterns": [
            {
              "match": "([[:alpha:]0-9\\s\\-_&$@\\#\\%\\^\\;\\+\\*!?()\\[\\]:\\/\\\\\\.\\,-]+)(?![^{]*\\})",
              "name": "string.quoted.double.html"
            },
            {
              "include": "#angular-interpolations"
            }
          ]
        }
      ]
    },
    "tag-minified-boolean-attributes": {
      "captures": {
        "0": {
          "name": "meta.attribute.$1.boolean.html"
        },
        "1": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.generic"
        },
        "2": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.colon"
        },
        "3": {
          "name": "entity.other.attribute-name.html html-template.ng.attributes.suffix"
        }
      },
      "match": "(?<!\\S)(?!(?:ref|let)?-)([\\w-]+)(:)?([\\w\\-\\_$]+)?\\b(?!=)"
    },
    "script-type-attribute": {
      "patterns": [
        {
          "match": "[\\s]*(type)(=)(\")((text|application)/((x-)?(javascript|typescript|coffeescript|dart|ecmascript))|(module))(\")",
          "captures": {
            "0": {
              "name": "meta.attribute.$1.html"
            },
            "1": {
              "name": "entity.other.attribute-name.html html-template.ng.attributes.generic"
            },
            "2": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            },
            "3": {
              "name": "string.quoted.double.html"
            },
            "4": {
              "name": "string.quoted.double.html"
            },
            "6": {
              "name": "html-template.ng.script.language.identifier"
            },
            "9": {
              "name": "html-template.ng.script.language.identifier"
            },
            "10": {
              "name": "string.quoted.double.html"
            }
          }
        },
        {
          "match": "[\\s]*(type)(=)(')((text|application)/((x-)?(javascript|typescript|coffeescript|dart|ecmascript))|(module))(')",
          "captures": {
            "0": {
              "name": "meta.attribute.$1.html"
            },
            "1": {
              "name": "entity.other.attribute-name.html html-template.ng.attributes.generic"
            },
            "2": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            },
            "3": {
              "name": "string.quoted.double.html"
            },
            "4": {
              "name": "string.quoted.double.html"
            },
            "6": {
              "name": "html-template.ng.script.language.identifier"
            },
            "9": {
              "name": "html-template.ng.script.language.identifier"
            },
            "10": {
              "name": "string.quoted.double.html"
            }
          }
        },
        {
          "match": "[\\s]*(lang)(=)(\"(javascript|typescript|coffeescript|dart)\")",
          "captures": {
            "1": {
              "name": "entity.other.attribute-name.html html-template.ng.attributes.generic"
            },
            "2": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            },
            "3": {
              "name": "string.quoted.double.html"
            },
            "4": {
              "name": "string.quoted.double.html html-template.ng.script.language.identifier"
            }
          }
        },
        {
          "match": "[\\s]*(lang)(=)('(javascript|typescript|coffeescript|dart)')",
          "captures": {
            "1": {
              "name": "entity.other.attribute-name.html html-template.ng.attributes.generic"
            },
            "2": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            },
            "3": {
              "name": "string.quoted.single.html"
            },
            "4": {
              "name": "html-template.ng.script.language.identifier"
            }
          }
        }
      ]
    },
    "style-type-attribute": {
      "patterns": [
        {
          "match": "[\\s]*(type)(=)(\"(text|stylesheet)/(css|scss|less|sass|stylus|styl|postcss)\")",
          "captures": {
            "0": {
              "name": "meta.attribute.$1.html"
            },
            "1": {
              "name": "entity.other.attribute-name.html html-template.ng.attributes.generic"
            },
            "2": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            },
            "3": {
              "name": "string.quoted.double.html"
            },
            "5": {
              "name": "string.quoted.double.html html-template.ng.style.language.identifier"
            }
          }
        },
        {
          "match": "[\\s]*(lang)(=)(\"(css|scss|less|sass|stylus|styl|postcss)\")",
          "captures": {
            "0": {
              "name": "meta.attribute.$1.html"
            },
            "1": {
              "name": "entity.other.attribute-name.html html-template.ng.attributes.generic"
            },
            "2": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            },
            "3": {
              "name": "string.quoted.single.html"
            },
            "4": {
              "name": "html-template.ng.style.language.identifier"
            }
          }
        }
      ]
    },
    "svg-non-string-attributes": {
      "patterns": [
        {
          "name": "meta.element.attribute.$2.svg",
          "begin": "[\\s\\n\\r\\t]*(\\b(?i:(d))\\b(?![\\w-]))(=)(\")",
          "beginCaptures": {
            "0": {
              "name": "meta.attribute.svg.$2.html"
            },
            "2": {
              "name": "entity.other.attribute-name.html html-template.ng.attributes.generic"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            },
            "4": {
              "name": "string.quoted.double.html"
            }
          },
          "end": "(\")",
          "endCaptures": {
            "1": {
              "name": "string.quoted.double.html"
            }
          },
          "patterns": [
            {
              "match": "([0-9]+)|([MmLlHhVvCcSsQqTtAaZz]+)|([\\.\\,\\-]+)",
              "captures": {
                "1": {
                  "name": "constant.numeric.css"
                },
                "2": {
                  "name": "keyword.other.commands.path.svg html-template.ng.svg.path.commands"
                },
                "3": {
                  "name": "punctuation.separator.delimiter.scss"
                }
              }
            }
          ]
        },
        {
          "name": "meta.element.attribute.$2.svg",
          "begin": "[\\s\\n\\r\\t]*(\\b(?i:(amplitude|azimuth|baseFrequency|begin|bias|by|clip-path|color|cursor|cx|cy|diffuseConstant|divisor|dur|dx|dy|elevation|end|exponent|fill-opacity|fill|filter|flood-color|flood-opacity|font-size-adjust|font-size|font-weight|from|fr|fx|fy|gradientTransform|hatchpath|height|intercept|k1|k2|k3|k4|kernelMatrix|keyPoints|keySplines|keyTimes|letter-spacing|lighting-color|limitingConeAngle|marker-end|marker-mid|marker-start|markerHeight|markerWidth|mask|max|media|min|numOctaves|offset|opacity|order|overline-position|overline-thickness|pathLength|patternTransform|pointsAtX|pointsAtY|pointsAtZ|points|radius|refX|refY|repeatCount|repeatDur|rotate|rx|ry|r|scale|seed|solid-color|solid-opacity|specularConstant|specularExponent|startOffset|stdDeviation|stop-color|stop-opacity|strikethrough-position|strikethrough-thickness|stroke-dashoffset|stroke-dassharray|stroke-miterlimit|stroke-width|stroke|surfaceScale|tabindex|tableValues|targetX|targetY|textLength|to|transform-origin|transform2|transform|underline-position|underline-thickness|values|viewbox|width|word-spacing|x1|x2|x|y1|y2|y|z))\\b(?![\\w-]))(=)(\")",
          "beginCaptures": {
            "2": {
              "name": "entity.other.attribute-name.html html-template.ng.attributes.generic"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            },
            "4": {
              "name": "string.quoted.double.html"
            }
          },
          "end": "(\")",
          "endCaptures": {
            "1": {
              "name": "string.quoted.double.html"
            }
          },
          "patterns": [
            {
              "begin": "(?<=\")",
              "end": "(?=\")",
              "name": "string.quoted.double.html",
              "patterns": [
                {
                  "include": "source.css.scss#property_values"
                },
                {
                  "include": "#angular-interpolations"
                },
                {
                  "include": "#entities"
                }
              ]
            }
          ]
        }
      ]
    },
    "tag-definition-angular": {
      "beginCaptures": {
        "0": {
          "name": "meta.tag.ng.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "meta.tag.structure.html entity.name.tag.html.ng entity.name.tag.html.ng.$2"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "patterns": [
        {
          "include": "#tag-stuff"
        }
      ],
      "begin": "(</?)(cdk-accordion-item|cdk-accordion|cdk-cell|cdk-footer-cell|cdk-footer-row|cdk-header-cell|cdk-header-row|cdk-nested-tree-node|cdk-row|cdk-step|cdk-table|cdk-tree-node|cdk-tree|cdk-virtual-scroll-viewport|mat-accordion|mat-action-list|mat-action-row|mat-autocomplete|mat-basic-chip|mat-button-toggle-group|mat-button-toggle|mat-calendar|mat-card-actions|mat-card-content|mat-card-footer|mat-card-header|mat-card-subtitle|mat-card-title-group|mat-card-title|mat-card|mat-cell|mat-checkbox|mat-chip-avatar|mat-chip-list|mat-chip|mat-date-range-input|mat-date-range-picker|mat-datepicker-actions|mat-datepicker-toggle|mat-datepicker|mat-dialog-actions|mat-dialog-content|mat-divider|mat-drawer-content|mat-drawer-container|mat-drawer|mat-error|mat-expansion-panel-header|mat-expansion-panel|mat-form-field|mat-grid-tile-footer|mat-grid-tile-header|mat-grid-tile|mat-grid-list|mat-grid-title|mat-header-cell|mat-header-row|mat-hint|mat-horizontal-stepper|mat-icon|mat-label|mat-list-item|mat-list-option|mat-list|mat-menu|mat-nav-list|mat-nav-tab-bar|mat-nested-tree-node|mat-optgroup|mat-option|mat-paginator|mat-panel-description|mat-panel-title|mat-progress-bar|mat-progress-spinner|mat-pseudo-checkbox|mat-radio-button|mat-radio-group|mat-row|mat-select-trigger|mat-selection-list|mat-select|mat-sidenav-container|mat-sidenav-content|mat-sidenav|mat-slide-toggle|mat-slider|mat-spinner|mat-stepper|mat-step|mat-tab-group|mat-tab-nav-panel|mat-table|mat-tab|mat-text-column|mat-toolbar-row|mat-toolbar|mat-tree-node|mat-tree|mat-vertical-stepper|ng-container|ng-content|ng-template|router-outlet)(:)?([\\w\\-\\_$]+)?\\b",
      "endCaptures": {
        "0": {
          "name": "meta.tag.ng.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "end": "(/?>)",
      "name": "meta.element.ng.html"
    },
    "tag-definition-custom": {
      "beginCaptures": {
        "0": {
          "name": "meta.tag.custom.$4.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "4": {
          "name": "meta.tag.structure.html entity.name.tag.html html-template.tag.custom"
        },
        "5": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "6": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "patterns": [
        {
          "include": "#tag-stuff"
        }
      ],
      "begin": "(<\\/?)((?!(wbr|video|var|ul|u|track|tr|time|thead|th|textarea|template|td|tbody|table|svg|sup|summary|sub|style|strong|span|source|small|select|section|script|samp|s|ruby|rt|rp|router-outlet|q|progress|pre|picture|param|p|output|option|optgroup|ol|object|noscript|ng-template|ng-content|ng-container|nav|meter|meta|mat-vertical-stepper|mat-tree-node|mat-tree|mat-toolbar-row|mat-toolbar|mat-text-column|mat-table|mat-tab-nav-panel|mat-tab-group|mat-tab|mat-stepper|mat-step|mat-spinner|mat-slider|mat-slide-toggle|mat-sidenav-content|mat-sidenav-container|mat-sidenav|mat-selection-list|mat-select-trigger|mat-select|mat-row|mat-radio-group|mat-radio-button|mat-pseudo-checkbox|mat-progress-spinner|mat-progress-bar|mat-panel-title|mat-panel-description|mat-paginator|mat-option|mat-optgroup|mat-nested-tree-node|mat-nav-tab-bar|mat-nav-list|mat-menu|mat-list-option|mat-list-item|mat-list|mat-label|mat-icon|mat-horizontal-stepper|mat-hint|mat-header-row|mat-header-cell|mat-grid-title|mat-grid-tile-header|mat-grid-tile-footer|mat-grid-tile|mat-grid-list|mat-form-field|mat-expansion-panel-header|mat-expansion-panel|mat-error|mat-drawer-content|mat-drawer-container|mat-drawer|mat-divider|mat-dialog-content|mat-dialog-actions|mat-datepicker-toggle|mat-datepicker-actions|mat-datepicker|mat-date-range-picker|mat-date-range-input|mat-chip-list|mat-chip-avatar|mat-chip|mat-checkbox|mat-cell|mat-card-title-group|mat-card-title|mat-card-subtitle|mat-card-header|mat-card-footer|mat-card-content|mat-card-actions|mat-card|mat-calendar|mat-button-toggle-group|mat-button-toggle|mat-basic-chip|mat-autocomplete|mat-action-row|mat-action-list|mat-accordion|mark|map|main|link|li|legend|label|kbd|ins|input|img|iframe|i|html|hr|hgroup|header|head|h1|form|footer|figure|figcaption|fieldset|embed|em|dt|dl|div|dialog|dfn|details|del|dd|datalist|data|colgroup|col|code|cite|cdk-virtual-scroll-viewport|cdk-tree-node|cdk-tree|cdk-table|cdk-step|cdk-row|cdk-nested-tree-node|cdk-header-row|cdk-header-cell|cdk-footer-row|cdk-footer-cell|cdk-cell|cdk-accordion-item|cdk-accordion|caption|canvas|button|br|body|blockquote|bdo|bdi|base|b|audio|aside|article|area|address|abbr|a)(?!-)\\b)([a-zA-Z0-9\\-\\_]+)(:)?([\\w\\-\\_$]+)?)\\b",
      "endCaptures": {
        "0": {
          "name": "meta.tag.custom.$4.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "end": "(/?>)",
      "name": "meta.element.custom.html"
    },
    "comment": {
      "patterns": [
        {
          "name": "comment.block.html",
          "begin": "<!--",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.begin.html"
            }
          },
          "end": "-->",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.end.html"
            }
          },
          "patterns": [
            {
              "include": "#comment"
            }
          ]
        }
      ]
    },
    "doctype": {
      "patterns": [
        {
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "punctuation.definition.tag.begin.html html-template.ng.exclamation.doctype"
            },
            "3": {
              "name": "entity.name.tag.html.doctype html-template.ng.doctype"
            }
          },
          "begin": "(<)(!)((?i:doctype))",
          "end": "(>)",
          "name": "meta.tag.metadata.doctype.html",
          "patterns": [
            {
              "begin": "(\\[)",
              "beginCaptures": {
                "0": "punctuation.definition.dtd.begin.html"
              },
              "end": "(\\])",
              "endCaptures": {
                "0": "punctuation.definition.dtd.end.html"
              },
              "patterns": [
                {
                  "include": "#xml-dtd"
                }
              ]
            },
            {
              "include": "#string-double-quoted-capture"
            },
            {
              "match": "[^\\s>]+",
              "name": "entity.other.attribute-name.html html-template.ng.attribute.doctype"
            }
          ]
        }
      ]
    },
    "entities": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.entity.html html-template.ng.entities.ampersand"
            },
            "912": {
              "name": "punctuation.definition.entity.html html-template.ng.entities.semicolon"
            }
          },
          "match": "(?x)(&)(?=[a-zA-Z])((a(s(ymp(eq)?|cr|t)|n(d(slope|d|v|and)?|g(s(t|ph)|zarr|e|le|rt(vb(d)?)?|msd(a(h|c|d|e|f|a|g|b))?)?)|c(y|irc|d|ute|E)?|tilde|o(pf|gon)|uml|p(id|os|prox(eq)?|e|E|acir)?|elig|f(r)?|w(conint|int)|l(pha|e(ph|fsym))|acute|ring|grave|m(p|a(cr|lg))|breve)|A(s(sign|cr)|nd|MP|c(y|irc)|tilde|o(pf|gon)|uml|pplyFunction|fr|Elig|lpha|acute|ring|grave|macr|breve))|(B(scr|cy|opf|umpeq|e(cause|ta|rnoullis)|fr|a(ckslash|r(v|wed))|reve)|b(s(cr|im(e)?|ol(hsub|b)?|emi)|n(ot|e(quiv)?)|c(y|ong)|ig(s(tar|qcup)|c(irc|up|ap)|triangle(down|up)|o(times|dot|plus)|uplus|vee|wedge)|o(t(tom)?|pf|wtie|x(h(d|u|D|U)?|times|H(d|u|D|U)?|d(R|l|r|L)|u(R|l|r|L)|plus|D(R|l|r|L)|v(R|h|H|l|r|L)?|U(R|l|r|L)|V(R|h|H|l|r|L)?|minus|box))|Not|dquo|u(ll(et)?|mp(e(q)?|E)?)|prime|e(caus(e)?|t(h|ween|a)|psi|rnou|mptyv)|karow|fr|l(ock|k(1(2|4)|34)|a(nk|ck(square|triangle(down|left|right)?|lozenge)))|a(ck(sim(eq)?|cong|prime|epsilon)|r(vee|wed(ge)?))|r(eve|vbar)|brk(tbrk)?))|(c(s(cr|u(p(e)?|b(e)?))|h(cy|i|eck(mark)?)|ylcty|c(irc|ups(sm)?|edil|a(ps|ron))|tdot|ir(scir|c(eq|le(d(R|circ|S|dash|ast)|arrow(left|right)))?|e|fnint|E|mid)?|o(n(int|g(dot)?)|p(y(sr)?|f|rod)|lon(e(q)?)?|m(p(fn|le(xes|ment))?|ma(t)?))|dot|u(darr(l|r)|p(s|c(up|ap)|or|dot|brcap)?|e(sc|pr)|vee|wed|larr(p)?|r(vearrow(left|right)|ly(eq(succ|prec)|vee|wedge)|arr(m)?|ren))|e(nt(erdot)?|dil|mptyv)|fr|w(conint|int)|lubs(uit)?|a(cute|p(s|c(up|ap)|dot|and|brcup)?|r(on|et))|r(oss|arr))|C(scr|hi|c(irc|onint|edil|aron)|ircle(Minus|Times|Dot|Plus)|Hcy|o(n(tourIntegral|int|gruent)|unterClockwiseContourIntegral|p(f|roduct)|lon(e)?)|dot|up(Cap)?|OPY|e(nterDot|dilla)|fr|lo(seCurly(DoubleQuote|Quote)|ckwiseContourIntegral)|a(yleys|cute|p(italDifferentialD)?)|ross))|(d(s(c(y|r)|trok|ol)|har(l|r)|c(y|aron)|t(dot|ri(f)?)|i(sin|e|v(ide(ontimes)?|onx)?|am(s|ond(suit)?)?|gamma)|Har|z(cy|igrarr)|o(t(square|plus|eq(dot)?|minus)?|ublebarwedge|pf|wn(harpoon(left|right)|downarrows|arrow)|llar)|d(otseq|a(rr|gger))?|u(har|arr)|jcy|e(lta|g|mptyv)|f(isht|r)|wangle|lc(orn|rop)|a(sh(v)?|leth|rr|gger)|r(c(orn|rop)|bkarow)|b(karow|lac)|Arr)|D(s(cr|trok)|c(y|aron)|Scy|i(fferentialD|a(critical(Grave|Tilde|Do(t|ubleAcute)|Acute)|mond))|o(t(Dot|Equal)?|uble(Right(Tee|Arrow)|ContourIntegral|Do(t|wnArrow)|Up(DownArrow|Arrow)|VerticalBar|L(ong(RightArrow|Left(RightArrow|Arrow))|eft(RightArrow|Tee|Arrow)))|pf|wn(Right(TeeVector|Vector(Bar)?)|Breve|Tee(Arrow)?|arrow|Left(RightVector|TeeVector|Vector(Bar)?)|Arrow(Bar|UpArrow)?))|Zcy|el(ta)?|D(otrahd)?|Jcy|fr|a(shv|rr|gger)))|(e(s(cr|im|dot)|n(sp|g)|c(y|ir(c)?|olon|aron)|t(h|a)|o(pf|gon)|dot|u(ro|ml)|p(si(v|lon)?|lus|ar(sl)?)|e|D(ot|Dot)|q(s(im|lant(less|gtr))|c(irc|olon)|u(iv(DD)?|est|als)|vparsl)|f(Dot|r)|l(s(dot)?|inters|l)?|a(ster|cute)|r(Dot|arr)|g(s(dot)?|rave)?|x(cl|ist|p(onentiale|ectation))|m(sp(1(3|4))?|pty(set|v)?|acr))|E(s(cr|im)|c(y|irc|aron)|ta|o(pf|gon)|NG|dot|uml|TH|psilon|qu(ilibrium|al(Tilde)?)|fr|lement|acute|grave|x(ists|ponentialE)|m(pty(SmallSquare|VerySmallSquare)|acr)))|(f(scr|nof|cy|ilig|o(pf|r(k(v)?|all))|jlig|partint|emale|f(ilig|l(ig|lig)|r)|l(tns|lig|at)|allingdotseq|r(own|a(sl|c(1(2|8|3|4|5|6)|78|2(3|5)|3(8|4|5)|45|5(8|6)))))|F(scr|cy|illed(SmallSquare|VerySmallSquare)|o(uriertrf|pf|rAll)|fr))|(G(scr|c(y|irc|edil)|t|opf|dot|T|Jcy|fr|amma(d)?|reater(Greater|SlantEqual|Tilde|Equal(Less)?|FullEqual|Less)|g|breve)|g(s(cr|im(e|l)?)|n(sim|e(q(q)?)?|E|ap(prox)?)|c(y|irc)|t(c(c|ir)|dot|quest|lPar|r(sim|dot|eq(qless|less)|less|a(pprox|rr)))?|imel|opf|dot|jcy|e(s(cc|dot(o(l)?)?|l(es)?)?|q(slant|q)?|l)?|v(nE|ertneqq)|fr|E(l)?|l(j|E|a)?|a(cute|p|mma(d)?)|rave|g(g)?|breve))|(h(s(cr|trok|lash)|y(phen|bull)|circ|o(ok(leftarrow|rightarrow)|pf|arr|rbar|mtht)|e(llip|arts(uit)?|rcon)|ks(earow|warow)|fr|a(irsp|lf|r(dcy|r(cir|w)?)|milt)|bar|Arr)|H(s(cr|trok)|circ|ilbertSpace|o(pf|rizontalLine)|ump(DownHump|Equal)|fr|a(cek|t)|ARDcy))|(i(s(cr|in(s(v)?|dot|v|E)?)|n(care|t(cal|prod|e(rcal|gers)|larhk)?|odot|fin(tie)?)?|c(y|irc)?|t(ilde)?|i(nfin|i(nt|int)|ota)?|o(cy|ta|pf|gon)|u(kcy|ml)|jlig|prod|e(cy|xcl)|quest|f(f|r)|acute|grave|m(of|ped|a(cr|th|g(part|e|line))))|I(scr|n(t(e(rsection|gral))?|visible(Comma|Times))|c(y|irc)|tilde|o(ta|pf|gon)|dot|u(kcy|ml)|Ocy|Jlig|fr|Ecy|acute|grave|m(plies|a(cr|ginaryI))?))|(j(s(cr|ercy)|c(y|irc)|opf|ukcy|fr|math)|J(s(cr|ercy)|c(y|irc)|opf|ukcy|fr))|(k(scr|hcy|c(y|edil)|opf|jcy|fr|appa(v)?|green)|K(scr|c(y|edil)|Hcy|opf|Jcy|fr|appa))|(l(s(h|cr|trok|im(e|g)?|q(uo(r)?|b)|aquo)|h(ar(d|u(l)?)|blk)|n(sim|e(q(q)?)?|E|ap(prox)?)|c(y|ub|e(il|dil)|aron)|Barr|t(hree|c(c|ir)|imes|dot|quest|larr|r(i(e|f)?|Par))?|Har|o(ng(left(arrow|rightarrow)|rightarrow|mapsto)|times|z(enge|f)?|oparrow(left|right)|p(f|lus|ar)|w(ast|bar)|a(ng|rr)|brk)|d(sh|ca|quo(r)?|r(dhar|ushar))|ur(dshar|uhar)|jcy|par(lt)?|e(s(s(sim|dot|eq(qgtr|gtr)|approx|gtr)|cc|dot(o(r)?)?|g(es)?)?|q(slant|q)?|ft(harpoon(down|up)|threetimes|leftarrows|arrow(tail)?|right(squigarrow|harpoons|arrow(s)?))|g)?|v(nE|ertneqq)|f(isht|loor|r)|E(g)?|l(hard|corner|tri|arr)?|a(ng(d|le)?|cute|t(e(s)?|ail)?|p|emptyv|quo|rr(sim|hk|tl|pl|fs|lp|b(fs)?)?|gran|mbda)|r(har(d)?|corner|tri|arr|m)|g(E)?|m(idot|oust(ache)?)|b(arr|r(k(sl(d|u)|e)|ac(e|k))|brk)|A(tail|arr|rr))|L(s(h|cr|trok)|c(y|edil|aron)|t|o(ng(RightArrow|left(arrow|rightarrow)|rightarrow|Left(RightArrow|Arrow))|pf|wer(RightArrow|LeftArrow))|T|e(ss(Greater|SlantEqual|Tilde|EqualGreater|FullEqual|Less)|ft(Right(Vector|Arrow)|Ceiling|T(ee(Vector|Arrow)?|riangle(Bar|Equal)?)|Do(ubleBracket|wn(TeeVector|Vector(Bar)?))|Up(TeeVector|DownVector|Vector(Bar)?)|Vector(Bar)?|arrow|rightarrow|Floor|A(ngleBracket|rrow(RightArrow|Bar)?)))|Jcy|fr|l(eftarrow)?|a(ng|cute|placetrf|rr|mbda)|midot))|(M(scr|cy|inusPlus|opf|u|e(diumSpace|llintrf)|fr|ap)|m(s(cr|tpos)|ho|nplus|c(y|omma)|i(nus(d(u)?|b)?|cro|d(cir|dot|ast)?)|o(dels|pf)|dash|u(ltimap|map)?|p|easuredangle|DDot|fr|l(cp|dr)|a(cr|p(sto(down|up|left)?)?|l(t(ese)?|e)|rker)))|(n(s(hort(parallel|mid)|c(cue|e|r)?|im(e(q)?)?|u(cc(eq)?|p(set(eq(q)?)?|e|E)?|b(set(eq(q)?)?|e|E)?)|par|qsu(pe|be)|mid)|Rightarrow|h(par|arr|Arr)|G(t(v)?|g)|c(y|ong(dot)?|up|edil|a(p|ron))|t(ilde|lg|riangle(left(eq)?|right(eq)?)|gl)|i(s(d)?|v)?|o(t(ni(v(c|a|b))?|in(dot|v(c|a|b)|E)?)?|pf)|dash|u(m(sp|ero)?)?|jcy|p(olint|ar(sl|t|allel)?|r(cue|e(c(eq)?)?)?)|e(s(im|ear)|dot|quiv|ar(hk|r(ow)?)|xist(s)?|Arr)?|v(sim|infin|Harr|dash|Dash|l(t(rie)?|e|Arr)|ap|r(trie|Arr)|g(t|e))|fr|w(near|ar(hk|r(ow)?)|Arr)|V(dash|Dash)|l(sim|t(ri(e)?)?|dr|e(s(s)?|q(slant|q)?|ft(arrow|rightarrow))?|E|arr|Arr)|a(ng|cute|tur(al(s)?)?|p(id|os|prox|E)?|bla)|r(tri(e)?|ightarrow|arr(c|w)?|Arr)|g(sim|t(r)?|e(s|q(slant|q)?)?|E)|mid|L(t(v)?|eft(arrow|rightarrow)|l)|b(sp|ump(e)?))|N(scr|c(y|edil|aron)|tilde|o(nBreakingSpace|Break|t(R(ightTriangle(Bar|Equal)?|everseElement)|Greater(Greater|SlantEqual|Tilde|Equal|FullEqual|Less)?|S(u(cceeds(SlantEqual|Tilde|Equal)?|perset(Equal)?|bset(Equal)?)|quareSu(perset(Equal)?|bset(Equal)?))|Hump(DownHump|Equal)|Nested(GreaterGreater|LessLess)|C(ongruent|upCap)|Tilde(Tilde|Equal|FullEqual)?|DoubleVerticalBar|Precedes(SlantEqual|Equal)?|E(qual(Tilde)?|lement|xists)|VerticalBar|Le(ss(Greater|SlantEqual|Tilde|Equal|Less)?|ftTriangle(Bar|Equal)?))?|pf)|u|e(sted(GreaterGreater|LessLess)|wLine|gative(MediumSpace|Thi(nSpace|ckSpace)|VeryThinSpace))|Jcy|fr|acute))|(o(s(cr|ol|lash)|h(m|bar)|c(y|ir(c)?)|ti(lde|mes(as)?)|S|int|opf|d(sold|iv|ot|ash|blac)|uml|p(erp|lus|ar)|elig|vbar|f(cir|r)|l(c(ir|ross)|t|ine|arr)|a(st|cute)|r(slope|igof|or|d(er(of)?|f|m)?|v|arr)?|g(t|on|rave)|m(i(nus|cron|d)|ega|acr))|O(s(cr|lash)|c(y|irc)|ti(lde|mes)|opf|dblac|uml|penCurly(DoubleQuote|Quote)|ver(B(ar|rac(e|ket))|Parenthesis)|fr|Elig|acute|r|grave|m(icron|ega|acr)))|(p(s(cr|i)|h(i(v)?|one|mmat)|cy|i(tchfork|v)?|o(intint|und|pf)|uncsp|er(cnt|tenk|iod|p|mil)|fr|l(us(sim|cir|two|d(o|u)|e|acir|mn|b)?|an(ck(h)?|kv))|ar(s(im|l)|t|a(llel)?)?|r(sim|n(sim|E|ap)|cue|ime(s)?|o(d|p(to)?|f(surf|line|alar))|urel|e(c(sim|n(sim|eqq|approx)|curlyeq|eq|approx)?)?|E|ap)?|m)|P(s(cr|i)|hi|cy|i|o(incareplane|pf)|fr|lusMinus|artialD|r(ime|o(duct|portion(al)?)|ecedes(SlantEqual|Tilde|Equal)?)?))|(q(scr|int|opf|u(ot|est(eq)?|at(int|ernions))|prime|fr)|Q(scr|opf|UOT|fr))|(R(s(h|cr)|ho|c(y|edil|aron)|Barr|ight(Ceiling|T(ee(Vector|Arrow)?|riangle(Bar|Equal)?)|Do(ubleBracket|wn(TeeVector|Vector(Bar)?))|Up(TeeVector|DownVector|Vector(Bar)?)|Vector(Bar)?|arrow|Floor|A(ngleBracket|rrow(Bar|LeftArrow)?))|o(undImplies|pf)|uleDelayed|e(verse(UpEquilibrium|E(quilibrium|lement)))?|fr|EG|a(ng|cute|rr(tl)?)|rightarrow)|r(s(h|cr|q(uo(r)?|b)|aquo)|h(o(v)?|ar(d|u(l)?))|nmid|c(y|ub|e(il|dil)|aron)|Barr|t(hree|imes|ri(e|f|ltri)?)|i(singdotseq|ng|ght(squigarrow|harpoon(down|up)|threetimes|left(harpoons|arrows)|arrow(tail)?|rightarrows))|Har|o(times|p(f|lus|ar)|a(ng|rr)|brk)|d(sh|ca|quo(r)?|ldhar)|uluhar|p(polint|ar(gt)?)|e(ct|al(s|ine|part)?|g)|f(isht|loor|r)|l(har|arr|m)|a(ng(d|e|le)?|c(ute|e)|t(io(nals)?|ail)|dic|emptyv|quo|rr(sim|hk|c|tl|pl|fs|w|lp|ap|b(fs)?)?)|rarr|x|moust(ache)?|b(arr|r(k(sl(d|u)|e)|ac(e|k))|brk)|A(tail|arr|rr)))|(s(s(cr|tarf|etmn|mile)|h(y|c(hcy|y)|ort(parallel|mid)|arp)|c(sim|y|n(sim|E|ap)|cue|irc|polint|e(dil)?|E|a(p|ron))?|t(ar(f)?|r(ns|aight(phi|epsilon)))|i(gma(v|f)?|m(ne|dot|plus|e(q)?|l(E)?|rarr|g(E)?)?)|zlig|o(pf|ftcy|l(b(ar)?)?)|dot(e|b)?|u(ng|cc(sim|n(sim|eqq|approx)|curlyeq|eq|approx)?|p(s(im|u(p|b)|et(neq(q)?|eq(q)?)?)|hs(ol|ub)|1|n(e|E)|2|d(sub|ot)|3|plus|e(dot)?|E|larr|mult)?|m|b(s(im|u(p|b)|et(neq(q)?|eq(q)?)?)|n(e|E)|dot|plus|e(dot)?|E|rarr|mult)?)|pa(des(uit)?|r)|e(swar|ct|tm(n|inus)|ar(hk|r(ow)?)|xt|mi|Arr)|q(su(p(set(eq)?|e)?|b(set(eq)?|e)?)|c(up(s)?|ap(s)?)|u(f|ar(e|f))?)|fr(own)?|w(nwar|ar(hk|r(ow)?)|Arr)|larr|acute|rarr|m(t(e(s)?)?|i(d|le)|eparsl|a(shp|llsetminus))|bquo)|S(scr|hort(RightArrow|DownArrow|UpArrow|LeftArrow)|c(y|irc|edil|aron)?|tar|igma|H(cy|CHcy)|opf|u(c(hThat|ceeds(SlantEqual|Tilde|Equal)?)|p(set|erset(Equal)?)?|m|b(set(Equal)?)?)|OFTcy|q(uare(Su(perset(Equal)?|bset(Equal)?)|Intersection|Union)?|rt)|fr|acute|mallCircle))|(t(s(hcy|c(y|r)|trok)|h(i(nsp|ck(sim|approx))|orn|e(ta(sym|v)?|re(4|fore))|k(sim|ap))|c(y|edil|aron)|i(nt|lde|mes(d|b(ar)?)?)|o(sa|p(cir|f(ork)?|bot)?|ea)|dot|prime|elrec|fr|w(ixt|ohead(leftarrow|rightarrow))|a(u|rget)|r(i(sb|time|dot|plus|e|angle(down|q|left(eq)?|right(eq)?)?|minus)|pezium|ade)|brk)|T(s(cr|trok)|RADE|h(i(nSpace|ckSpace)|e(ta|refore))|c(y|edil|aron)|S(cy|Hcy)|ilde(Tilde|Equal|FullEqual)?|HORN|opf|fr|a(u|b)|ripleDot))|(u(scr|h(ar(l|r)|blk)|c(y|irc)|t(ilde|dot|ri(f)?)|Har|o(pf|gon)|d(har|arr|blac)|u(arr|ml)|p(si(h|lon)?|harpoon(left|right)|downarrow|uparrows|lus|arrow)|f(isht|r)|wangle|l(c(orn(er)?|rop)|tri)|a(cute|rr)|r(c(orn(er)?|rop)|tri|ing)|grave|m(l|acr)|br(cy|eve)|Arr)|U(scr|n(ion(Plus)?|der(B(ar|rac(e|ket))|Parenthesis))|c(y|irc)|tilde|o(pf|gon)|dblac|uml|p(si(lon)?|downarrow|Tee(Arrow)?|per(RightArrow|LeftArrow)|DownArrow|Equilibrium|arrow|Arrow(Bar|DownArrow)?)|fr|a(cute|rr(ocir)?)|ring|grave|macr|br(cy|eve)))|(v(s(cr|u(pn(e|E)|bn(e|E)))|nsu(p|b)|cy|Bar(v)?|zigzag|opf|dash|prop|e(e(eq|bar)?|llip|r(t|bar))|Dash|fr|ltri|a(ngrt|r(s(igma|u(psetneq(q)?|bsetneq(q)?))|nothing|t(heta|riangle(left|right))|p(hi|i|ropto)|epsilon|kappa|r(ho)?))|rtri|Arr)|V(scr|cy|opf|dash(l)?|e(e|r(yThinSpace|t(ical(Bar|Separator|Tilde|Line))?|bar))|Dash|vdash|fr|bar))|(w(scr|circ|opf|p|e(ierp|d(ge(q)?|bar))|fr|r(eath)?)|W(scr|circ|opf|edge|fr))|(X(scr|i|opf|fr)|x(s(cr|qcup)|h(arr|Arr)|nis|c(irc|up|ap)|i|o(time|dot|p(f|lus))|dtri|u(tri|plus)|vee|fr|wedge|l(arr|Arr)|r(arr|Arr)|map))|(y(scr|c(y|irc)|icy|opf|u(cy|ml)|en|fr|ac(y|ute))|Y(scr|c(y|irc)|opf|uml|Icy|Ucy|fr|acute|Acy))|(z(scr|hcy|c(y|aron)|igrarr|opf|dot|e(ta|etrf)|fr|w(nj|j)|acute)|Z(scr|c(y|aron)|Hcy|opf|dot|e(ta|roWidthSpace)|fr|acute)))(;)",
          "name": "constant.character.entity.named.$2.html"
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.entity.html html-template.ng.entities.ampersand"
            },
            "2": {
              "name": "punctuation.definition.entity.html html-template.ng.entities.semicolon"
            }
          },
          "match": "(&)#[0-9]+(;)",
          "name": "constant.character.entity.numeric.decimal.html"
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.entity.html html-template.ng.entities.ampersand"
            },
            "3": {
              "name": "punctuation.definition.entity.html html-template.ng.entities.semicolon"
            }
          },
          "match": "(&)#[xX][0-9a-fA-F]+(;)",
          "name": "constant.character.entity.numeric.hexadecimal.html"
        },
        {
          "match": "(&[a-zA-Z0-9]+;)",
          "captures": {
            "1": {
              "name": "invalid.illegal.ambiguous-ampersand.html"
            }
          }
        }
      ]
    },
    "tag-definition-inline-void": {
      "beginCaptures": {
        "0": {
          "name": "meta.tag.inline.$2.void.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "meta.tag.inline.html entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "patterns": [
        {
          "include": "#tag-stuff"
        }
      ],
      "begin": "(</?)(wbr)(:)?([\\w\\-\\_$]+)?\\b",
      "endCaptures": {
        "0": {
          "name": "meta.tag.inline.$2.void.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "end": "(/?>)",
      "name": "meta.element.inline.html"
    },
    "tag-definition-inline": {
      "beginCaptures": {
        "0": {
          "name": "meta.tag.inline.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "meta.tag.inline.html entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "patterns": [
        {
          "include": "#tag-stuff"
        }
      ],
      "begin": "(</?)(var|time|sup|sub|strong|span|small|samp|s\\b|ruby|rt|rp|q|mark|kbd|ins|i|em|dfn|del|data|code|cite|bdo|bdi|b|abbr)(:)?([\\w\\-\\_$]+)?\\b",
      "endCaptures": {
        "0": {
          "name": "meta.tag.inline.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "end": "(/?>)",
      "name": "meta.element.inline.html"
    },
    "tag-definition-metadata-void": {
      "beginCaptures": {
        "0": {
          "name": "meta.tag.metadata.$2.void.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "meta.tag.metadata.html entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "patterns": [
        {
          "include": "#tag-stuff"
        }
      ],
      "begin": "(</?)(meta|base)(:)?([\\w\\-\\_$]+)?\\b",
      "endCaptures": {
        "0": {
          "name": "meta.tag.metadata.$2.void.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "end": "(/?>)",
      "name": "meta.element.metadata.html"
    },
    "tag-definition-metadata": {
      "beginCaptures": {
        "0": {
          "name": "meta.tag.metadata.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "meta.tag.metadata.html entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "patterns": [
        {
          "include": "#tag-stuff"
        }
      ],
      "begin": "(</?)(noscript)(:)?([\\w\\-\\_$]+)?\\b",
      "endCaptures": {
        "0": {
          "name": "meta.tag.metadata.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "end": "(/?>)",
      "name": "meta.element.metadata.html"
    },
    "tag-definition-object-void": {
      "beginCaptures": {
        "0": {
          "name": "meta.tag.object.$2.void.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "meta.tag.object.html entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "patterns": [
        {
          "include": "#tag-stuff"
        }
      ],
      "begin": "(</?)(track|source|embed)(:)?([\\w\\-\\_$]+)?\\b",
      "endCaptures": {
        "0": {
          "name": "meta.tag.object.$2.void.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "end": "(/?>)",
      "name": "meta.element.object.html"
    },
    "tag-definition-object": {
      "beginCaptures": {
        "0": {
          "name": "meta.tag.object.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "meta.tag.object.html entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "patterns": [
        {
          "include": "#tag-stuff"
        }
      ],
      "begin": "(</?)(video|picture|canvas|audio)(:)?([\\w\\-\\_$]+)?\\b",
      "endCaptures": {
        "0": {
          "name": "meta.tag.object.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "end": "(/?>)",
      "name": "meta.element.object.html"
    },
    "tag-definition-structure": {
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "meta.tag.structure.html entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "patterns": [
        {
          "include": "#tag-stuff"
        }
      ],
      "begin": "(</?)(textarea|template|summary|select|section|progress|output|option|optgroup|nav|meter|map|main|label|hgroup|header|form|footer|figure|figcaption|fieldset|dt|dialog|details|dd|datalist|button|blockquote|aside|article|address)(:)?([\\w\\-\\_$]+)?\\b",
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "end": "(/?>)",
      "name": "meta.element.structure.html"
    },
    "tag-definition-primeng": {
      "beginCaptures": {
        "0": {
          "name": "meta.tag.primeng.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "meta.tag.structure.html entity.name.tag.html.primeng entity.name.tag.html.primeng.$2"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "patterns": [
        {
          "include": "#tag-stuff"
        }
      ],
      "begin": "(</?)(p-accordionTab|p-accordion|p-autocomplete|p-autoComplete|p-avatarGroup|p-avatar|p-badge|p-blockUI|p-breadcrumb|p-button|p-calendar|p-captcha|p-card|p-carousel|p-cascadeSelectSub|p-cascadeSelect|p-cellEditor|p-chart|p-checkbox|p-chips|p-chip|p-colorPicker|p-columnFilter|p-confirmDialog|p-confirmPopup|p-contextMenuSub|p-contextMenu|p-dataView|p-dialog|p-divider|p-dock|p-dropdownItem|p-dropdown|p-dynamicDialog|p-editor|p-fieldset|p-fileUpload|p-fullCalendar|p-galleria|p-gmap|p-header|p-image|p-inplaceDisplay|p-inplace|p-inputMask|p-inputNumber|p-inputSwitch|p-knob|p-lightbox|p-listbox|p-megaMenu|p-menubarSub|p-menubar|p-menu|p-messages|p-message|p-multiSelectItem|p-multiSelect|p-orderList|p-organizationChart|p-overlayPanel|p-paginator|p-panelMenuSub|p-panelMenu|p-panel|p-password|p-pickList|p-progressBar|p-progressSpinner|p-radioButton|p-rating|p-scroller|p-scrollPanel|p-scrollTop|p-selectButton|p-sidebar|p-skeleton|p-slideMenuSub|p-slideMenu|p-slider|p-sortIcon|p-speedDial|p-spinner|p-splitButton|p-splitter|p-steps|p-tableCheckbox|p-tableHeaderCheckbox|p-tableRadioButton|p-table|p-tabMenu|p-tabPanel|p-tabView|p-tag|p-terminal|p-tieredMenuSub|p-tieredMenu|p-timeline|p-toastItem|p-toast|p-toggleButton|p-toolbar|p-treeNode|p-treeSelect|p-treeTableCellEditor|p-treeTableCheckbox|p-treeTableSortIcon|p-treeTableToggler|p-treeTable|p-tree|p-triStateCheckbox|p-virtualScroller)(:)?([\\w\\-\\_$]+)?\\b",
      "endCaptures": {
        "0": {
          "name": "meta.tag.primeng.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "end": "(/?>)",
      "name": "meta.element.primeng.html"
    },
    "tag-svg": {
      "begin": "(^[\\t]+)?(?=<(?i:svg)\\b(?!(?:[\\w-])))",
      "beginCaptures": {
        "1": {
          "name": "punctuation.whitespace.embedded.leading.html"
        }
      },
      "end": "(?!\\G)([\\t]*$\\n?)?",
      "endCaptures": {
        "1": {
          "name": "punctuation.whitespace.embedded.trailing.html"
        }
      },
      "patterns": [
        {
          "begin": "(?i)(<)(svg)(?=\\s|/?>)",
          "beginCaptures": {
            "0": {
              "name": "meta.tag.metadata.svg.start.html"
            },
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html html-template.tag.svg"
            }
          },
          "end": "(?i)((<)/)(svg)\\s*(>)",
          "endCaptures": {
            "0": {
              "name": "meta.tag.metadata.svg.end.html"
            },
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "source.css-ignored-vscode"
            },
            "3": {
              "name": "entity.name.tag.html html-template.tag.svg"
            },
            "4": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "name": "meta.embedded.block.html",
          "patterns": [
            {
              "begin": "\\G",
              "captures": {
                "1": {
                  "name": "punctuation.definition.tag.end.html"
                }
              },
              "end": "(>)",
              "patterns": [
                {
                  "include": "#svg-non-string-attributes"
                },
                {
                  "match": "[\\s\\n\\r\\t]*(\\b(baseProfile|contentStyleType|contentScriptType|clip|requiredFeatures|enable-background|zoomAndPan|version|xml:space|xml:lang|xml:base)\\b)(=)?",
                  "captures": {
                    "0": {
                      "name": "meta.attribute.$1.svg"
                    },
                    "2": {
                      "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.svg.$1"
                    },
                    "3": {
                      "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
                    }
                  }
                },
                {
                  "include": "#tag-stuff"
                }
              ]
            },
            {
              "begin": "(?!\\G)",
              "end": "(?=</(?i:svg))",
              "patterns": [
                {
                  "include": "#tag-deprecated-svg-attribute-vkern"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-view"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-use"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-tspan"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-tref"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-textPath"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-text"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-symbol"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-switch"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-set"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-rect"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-radialGradient"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-polyline"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-polygon"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-pattern"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-path"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-mpath"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-missing-glyph"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-mask"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-marker"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-linearGradient"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-line"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-image"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-hkern"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-glyphRef"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-glyph"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-g"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-foreignObject"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-font"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-font-face"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-font-face-uri"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-font-face-name"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-font-face-format"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-filter"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-feSpecularLighting"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-feImage"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-feDiffuseLighting"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-feConvolveMatrix"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-ellipse"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-defs"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-cursor"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-clipPath"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-circle"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-animateTransform"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-animateMotion"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-animateColor"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-animate"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-altGlyph"
                },
                {
                  "include": "#tag-deprecated-svg-attribute-a"
                },
                {
                  "include": "#tag-script"
                },
                {
                  "include": "#tag-style"
                },
                {
                  "include": "#tag-deprecated-svg-other"
                },
                {
                  "include": "#svg-tag-definition-inline"
                },
                {
                  "include": "#svg-tag-definition-metadata"
                },
                {
                  "include": "#svg-tag-definition-structure"
                },
                {
                  "include": "#svg-tag-invalid"
                }
              ]
            }
          ]
        }
      ]
    },
    "svg-tag-definition-inline": {
      "beginCaptures": {
        "0": {
          "name": "meta.tag.inline.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "patterns": [
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.svg.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ],
      "begin": "(</?)(discard|feBlend|feColorMatrix|feComposite|feDisplacementMap|feDistantLight|feDropShadow|feFlood|feFuncA|feFuncB|feFuncG|feFuncR|feGaussianBlur|feMergeNode|feMorphology|feOffset|fePointLight|feSpotLight|feTile|feTurbulence|hatchPath|solidcolor|stop)(:)?([\\w\\-\\_$]+)?\\b",
      "endCaptures": {
        "0": {
          "name": "meta.tag.inline.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "end": "(/?>)"
    },
    "svg-tag-definition-metadata": {
      "beginCaptures": {
        "0": {
          "name": "meta.tag.metadata.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "patterns": [
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.svg.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ],
      "begin": "(</?)(color-profile|desc|metadata|title)(:)?([\\w\\-\\_$]+)?\\b",
      "endCaptures": {
        "0": {
          "name": "meta.tag.metadata.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "end": "(/?>)"
    },
    "svg-tag-definition-structure": {
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.begin.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "patterns": [
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.svg.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ],
      "begin": "(</?)(feComponentTransfer|feMerge|hatch|mesh\\b|meshgradient|meshpatch|meshrow)(:)?([\\w\\-\\_$]+)?\\b",
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "end": "(/?>)",
      "name": "meta.element.structure.svg.html"
    },
    "svg-tag-invalid": {
      "beginCaptures": {
        "0": {
          "name": "meta.tag.other.invalid.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "patterns": [
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.svg.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ],
      "begin": "(?i)(</?)(\\w[^\\s:>]*)(:)?([\\w\\_$]+)?(?!(?:[\\w-]))(?=\\s|/?>)",
      "endCaptures": {
        "0": {
          "name": "meta.tag.other.invalid.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "end": "(/?>)"
    },
    "xml-dtd": {
      "begin": "(<)(!)(ELEMENT|ATTLIST|ENTITY|NOTATION)",
      "captures": {
        "1": {
          "name": "punctuation.definition.tag.begin.dtd"
        },
        "2": {
          "name": "punctuation.definition.tag.begin.html html-template.ng.exclamation.dtd"
        },
        "3": {
          "name": "entity.name.tag.dtd html-template.ng.dtd"
        }
      },
      "end": "\\s*(>)",
      "name": "meta.tag.type.dtd",
      "patterns": [
        {
          "match": "\\s+(CDATA|IDREFS|IDREF|ID|NMTOKENS|NMTOKEN|ENTITY|ENTITIES|NOTATION|SYSTEM|NDATA)",
          "name": "keyword.other.data-type.dtd"
        },
        {
          "match": "((?<!(?:\\!|\\(|,|\\||#))(\\b[A-Za-z0-9]+\\b)(?!\\)))",
          "name": "entity.other.attribute-name.html html-template.ng.attribute.doctype"
        },
        {
          "match": "\\?|\\+|\\*|\\|",
          "name": "entity.name.occurrence.dtd html-template.ng.occurrence.dtd"
        },
        {
          "match": "(#[A-Z]+)|(ANY)|(EMPTY)",
          "name": "constant.language.dtd"
        },
        {
          "begin": "'|\"",
          "end": "'|\"",
          "name": "string.quoted.double.dtd"
        },
        {
          "begin": "(%[a-zA-Z][a-zA-Z0-9_-])",
          "end": ";",
          "name": "variable.language.dtd"
        },
        {
          "begin": "\\(",
          "end": "\\)",
          "name": "meta.tag.type.dtd",
          "patterns": [
            {
              "match": "\\s+(CDATA|IDREFS|IDREF|ID|NMTOKENS|NMTOKEN|ENTITY|ENTITIES|NOTATION|SYSTEM|NDATA)",
              "name": "keyword.other.data-type.dtd"
            },
            {
              "match": "(#[A-Z]+)|(ANY)|(EMPTY)",
              "name": "constant.language.dtd"
            },
            {
              "begin": "'|\"",
              "end": "'|\"",
              "name": "string.quoted.double.dtd"
            },
            {
              "match": "\\?|\\+|\\*|\\|",
              "name": "entity.name.occurrence.dtd html-template.ng.occurrence.dtd"
            },
            {
              "begin": "(%[a-zA-Z][a-zA-Z0-9_-])",
              "end": ";",
              "name": "variable.language.dtd"
            },
            {
              "match": "(?<!#)\\b[A-Za-z0-9]+",
              "name": "entity.name.qualifier.dtd html-template.ng.qualifier.dtd"
            }
          ]
        }
      ]
    },
    "xml-processing": {
      "begin": "(<\\?)(xml)(?!-)",
      "captures": {
        "1": {
          "name": "punctuation.definition.tag.html"
        },
        "2": {
          "name": "entity.name.tag.html"
        }
      },
      "end": "(\\?>)",
      "name": "meta.tag.metadata.processing.xml.html",
      "patterns": [
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "xml-stylesheet-processing": {
      "begin": "(<\\?)(xml-stylesheet)",
      "captures": {
        "1": {
          "name": "punctuation.definition.tag.html"
        },
        "2": {
          "name": "entity.name.tag.html"
        }
      },
      "end": "(\\?>)",
      "name": "meta.tag.metadata.processing.xml-stylesheet.html",
      "patterns": [
        {
          "include": "#xml-stylesheet-type-attribute"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "xml-stylesheet-type-attribute": {
      "patterns": [
        {
          "match": "[\\s]*(type)(=)(\"(text)/(css|xml|xsl)\")",
          "captures": {
            "0": {
              "name": "meta.attribute.type.xml"
            },
            "1": {
              "name": "entity.other.attribute-name.html html-template.ng.attributes.generic"
            },
            "2": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            },
            "3": {
              "name": "string.quoted.double.html"
            },
            "5": {
              "name": "string.quoted.double.html html-template.ng.xmlStylesheet.language.identifier"
            }
          }
        },
        {
          "match": "[\\s]*(type)(=)('(text)/(css|xml|xsl)')",
          "captures": {
            "0": {
              "name": "meta.attribute.type.xml"
            },
            "1": {
              "name": "entity.other.attribute-name.html html-template.ng.attributes.generic"
            },
            "2": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            },
            "3": {
              "name": "string.quoted.single.html"
            },
            "5": {
              "name": "html-template.ng.xmlStylesheet.language.identifier"
            }
          }
        }
      ]
    },
    "angular-expression": {
      "name": "expression.ng",
      "patterns": [
        {
          "include": "#var-keywords"
        },
        {
          "include": "#operator-navigator"
        },
        {
          "include": "#ts-string"
        },
        {
          "include": "#literal"
        },
        {
          "include": "#ternary-expression"
        },
        {
          "include": "#object-literal"
        },
        {
          "include": "#expression-operators"
        },
        {
          "include": "#function-call"
        },
        {
          "include": "#identifiers"
        },
        {
          "include": "#paren-expression"
        },
        {
          "include": "#punctuation-comma"
        },
        {
          "include": "#punctuation-accessor"
        }
      ]
    },
    "array-literal": {
      "name": "meta.array.literal.ts",
      "begin": "\\[",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.square.ts"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "meta.brace.square.ts"
        }
      },
      "patterns": [
        {
          "include": "#angular-expression"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "binding-element": {
      "patterns": [
        {
          "include": "#variable-initializer"
        }
      ]
    },
    "boolean-literal": {
      "patterns": [
        {
          "name": "constant.language.boolean.true.ts",
          "match": "(?<!\\.|\\$)\\btrue\\b(?!\\$)"
        },
        {
          "name": "constant.language.boolean.false.ts",
          "match": "(?<!\\.|\\$)\\bfalse\\b(?!\\$)"
        }
      ]
    },
    "expression-operators": {
      "patterns": [
        {
          "match": "((?<!\\|)(\\|)(?!\\|))\\s?([a-zA-Z0-9\\-\\_]*)",
          "captures": {
            "2": {
              "name": "keyword.operator.logical.ts html-template.ng.expression.operator.logical"
            },
            "3": {
              "name": "entity.name.function.pipe.ng"
            }
          }
        },
        {
          "name": "keyword.control.flow.ts",
          "match": "(?<!\\.|\\$)\\b(await)\\b(?!\\$)"
        },
        {
          "name": "keyword.operator.expression.delete.ts",
          "match": "(?<!\\.|\\$)\\bdelete\\b(?!\\$)"
        },
        {
          "name": "keyword.operator.expression.in.ts",
          "match": "(?<!\\.|\\$)\\bin\\b(?!\\$)"
        },
        {
          "name": "keyword.operator.expression.of.ts",
          "match": "(?<!\\.|\\$)\\bof\\b(?!\\$)"
        },
        {
          "name": "keyword.control.else.ts",
          "match": "(?<!\\.|\\$)\\belse\\b(?!\\$)"
        },
        {
          "name": "keyword.control.then.ts",
          "match": "(?<!\\.|\\$)\\bthen\\b(?!\\$)"
        },
        {
          "name": "keyword.operator.expression.instanceof.ts",
          "match": "(?<!\\.|\\$)\\binstanceof\\b(?!\\$)"
        },
        {
          "name": "keyword.operator.new.ts",
          "match": "(?<!\\.|\\$)\\bnew\\b(?!\\$)"
        },
        {
          "include": "#typeof-operator"
        },
        {
          "name": "keyword.operator.expression.void.ts",
          "match": "(?<!\\.|\\$)\\bvoid\\b(?!\\$)"
        },
        {
          "begin": "(?<!\\.|\\$)\\bas\\b(?!\\$)",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.as.ts"
            }
          },
          "end": "(?=$|\"|[;,:})\\]])",
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        {
          "name": "keyword.operator.assignment.compound.ts html-template.ng.expression.operator.compound",
          "match": "\\*=|(?<!\\()/=|%=|\\+=|\\-="
        },
        {
          "name": "keyword.operator.assignment.compound.bitwise.ts html-template.ng.expression.operator.compound",
          "match": "\\&=|\\^=|<<=|>>=|>>>=|\\|="
        },
        {
          "name": "keyword.operator.bitwise.shift.ts html-template.ng.expression.operator.bitwise",
          "match": "<<|>>>|>>"
        },
        {
          "name": "keyword.operator.comparison.ts html-template.ng.expression.operator.comparison",
          "match": "===|!==|==|!="
        },
        {
          "name": "keyword.operator.relational.ts html-template.ng.expression.operator.relational",
          "match": "<=|>=|<>|<|>"
        },
        {
          "name": "keyword.operator.logical.ts html-template.ng.expression.operator.logical",
          "match": "\\!|&&|\\|\\|"
        },
        {
          "name": "keyword.operator.bitwise.ts html-template.ng.expression.operator.bitwise",
          "match": "\\&|~|\\^|\\|"
        },
        {
          "name": "keyword.operator.assignment.ts",
          "match": "\\="
        },
        {
          "name": "keyword.operator.decrement.ts",
          "match": "--"
        },
        {
          "name": "keyword.operator.increment.ts",
          "match": "\\+\\+"
        },
        {
          "name": "keyword.operator.arithmetic.ts html-template.ng.expression.operator.arithmetic",
          "match": "%|\\*|/|-|\\+"
        },
        {
          "match": "(?<=[_$[:alnum:]])\\s*(/)(?![/*])",
          "captures": {
            "1": {
              "name": "keyword.operator.arithmetic.ts html-template.ng.expression.operator.arithmetic"
            }
          }
        }
      ]
    },
    "function-call": {
      "begin": "(?=(\\.\\s*)?([_$[:alpha:]][_$[:alnum:]]*)\\s*(<([^<>]|\\<[^<>]+\\>)+>\\s*)?\\()",
      "end": "(?<=\\))(?!(\\.\\s*)?([_$[:alpha:]][_$[:alnum:]]*)\\s*(<([^<>]|\\<[^<>]+\\>)+>\\s*)?\\()",
      "patterns": [
        {
          "name": "punctuation.accessor.ts",
          "match": "\\."
        },
        {
          "name": "entity.name.function.ts",
          "match": "([_$[:alpha:]][_$[:alnum:]]*)"
        },
        {
          "name": "meta.type.parameters.ts",
          "begin": "\\<",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.typeparameters.begin.ts"
            }
          },
          "end": "\\>",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.typeparameters.end.ts"
            }
          },
          "patterns": [
            {
              "include": "#type"
            },
            {
              "include": "#punctuation-comma"
            }
          ]
        },
        {
          "include": "#paren-expression"
        }
      ]
    },
    "function-parameters": {
      "name": "meta.parameters.ts",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.parameters.begin.ts"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.parameters.end.ts"
        }
      },
      "patterns": [
        {
          "include": "#decorator"
        },
        {
          "include": "#parameter-name"
        },
        {
          "include": "#variable-initializer"
        },
        {
          "name": "punctuation.separator.parameter.ts",
          "match": ","
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "support.class.ts",
          "match": "([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\\.\\s*prototype\\b(?!\\$))"
        },
        {
          "match": "(?x)(\\?\\.|\\!\\.|\\.)\\s*(?:\n  ([[:upper:]][_$[:digit:][:upper:]]*) |\n  ([_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)",
          "captures": {
            "1": {
              "name": "punctuation.accessor.ts"
            },
            "2": {
              "name": "constant.other.object.property.ts"
            },
            "3": {
              "name": "variable.other.object.property.ts"
            }
          }
        },
        {
          "match": "(?x)(?:(\\?\\.|\\!\\.|\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*=\\s*( (async\\s+)|(function\\s*[(<])|(function\\s+)| ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)| ((<([^<>]|\\<[^<>]+\\>)+>\\s*)?\\(([^()]|\\([^()]*\\))*\\)(\\s*:\\s*(.)*)?\\s*=>)))",
          "captures": {
            "1": {
              "name": "punctuation.accessor.ts"
            },
            "2": {
              "name": "entity.name.function.ts"
            }
          }
        },
        {
          "match": "(\\?\\.|\\!\\.|\\.)\\s*([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])",
          "captures": {
            "1": {
              "name": "punctuation.accessor.ts"
            },
            "2": {
              "name": "constant.other.property.ts"
            }
          }
        },
        {
          "match": "(?x)(?:\n  ([[:upper:]][_$[:digit:][:upper:]]*) |\n  ([_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)",
          "captures": {
            "1": {
              "name": "constant.other.object.ts"
            },
            "2": {
              "name": "variable.other.object.ts"
            }
          }
        },
        {
          "name": "constant.character.other",
          "match": "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])"
        },
        {
          "name": "variable.other.property.ts",
          "match": "[_$[:alpha:]][_$[:alnum:]]*"
        }
      ]
    },
    "literal": {
      "name": "literal.ts",
      "patterns": [
        {
          "include": "#numeric-literal"
        },
        {
          "include": "#boolean-literal"
        },
        {
          "include": "#null-literal"
        },
        {
          "include": "#undefined-literal"
        },
        {
          "include": "#numericConstant-literal"
        },
        {
          "include": "#array-literal"
        },
        {
          "include": "#this-literal"
        }
      ]
    },
    "null-literal": {
      "name": "constant.language.null.ts",
      "match": "(?<!\\.|\\$)\\bnull\\b(?!\\$)"
    },
    "numeric-literal": {
      "patterns": [
        {
          "name": "constant.numeric.hex.ts",
          "match": "\\b(?<!\\$)0(x|X)[0-9a-fA-F]+\\b(?!\\$)"
        },
        {
          "name": "constant.numeric.binary.ts",
          "match": "\\b(?<!\\$)0(b|B)[01]+\\b(?!\\$)"
        },
        {
          "name": "constant.numeric.octal.ts",
          "match": "\\b(?<!\\$)0(o|O)?[0-7]+\\b(?!\\$)"
        },
        {
          "match": "(?x)\n(?<!\\$)(?:\n  (?:\\b[0-9]+(\\.)[0-9]+[eE][+-]?[0-9]+\\b)| # 1.1E+3\n  (?:\\b[0-9]+(\\.)[eE][+-]?[0-9]+\\b)|       # 1.E+3\n  (?:\\B(\\.)[0-9]+[eE][+-]?[0-9]+\\b)|       # .1E+3\n  (?:\\b[0-9]+[eE][+-]?[0-9]+\\b)|            # 1E+3\n  (?:\\b[0-9]+(\\.)[0-9]+\\b)|                # 1.1\n  (?:\\b[0-9]+(\\.)\\B)|                      # 1.\n  (?:\\B(\\.)[0-9]+\\b)|                      # .1\n  (?:\\b[0-9]+\\b(?!\\.))                     # 1\n)(?!\\$)",
          "captures": {
            "0": {
              "name": "constant.numeric.decimal.ts"
            },
            "1": {
              "name": "meta.delimiter.decimal.period.ts"
            },
            "2": {
              "name": "meta.delimiter.decimal.period.ts"
            },
            "3": {
              "name": "meta.delimiter.decimal.period.ts"
            },
            "4": {
              "name": "meta.delimiter.decimal.period.ts"
            },
            "5": {
              "name": "meta.delimiter.decimal.period.ts"
            },
            "6": {
              "name": "meta.delimiter.decimal.period.ts"
            }
          }
        }
      ]
    },
    "numericConstant-literal": {
      "patterns": [
        {
          "name": "constant.language.nan.ts",
          "match": "(?<!\\.|\\$)\\bNaN\\b(?!\\$)"
        },
        {
          "name": "constant.language.infinity.ts",
          "match": "(?<!\\.|\\$)\\bInfinity\\b(?!\\$)"
        }
      ]
    },
    "object-literal": {
      "name": "meta.objectliteral.ts",
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.block.ts"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.ts"
        }
      },
      "patterns": [
        {
          "include": "#object-member"
        }
      ]
    },
    "object-member": {
      "patterns": [
        {
          "name": "meta.object.member.ts",
          "begin": "(?=(?:(?:\\'[^']*\\')|(?:\\\"[^\"]*\\\")|(?:\\[([^\\[\\]]|\\[[^\\[\\]]+\\])+\\]))\\s*:)",
          "end": "(?=,|\\})",
          "patterns": [
            {
              "name": "meta.object-literal.key.ts",
              "begin": "(?=(?:(?:\\'[^']*\\')|(?:\\\"[^\"]*\\\")|(?:\\[([^\\[\\]]|\\[[^\\[\\]]+\\])+\\]))\\s*:)",
              "end": ":",
              "endCaptures": {
                "0": {
                  "name": "punctuation.separator.key-value.ts"
                }
              },
              "patterns": [
                {
                  "include": "#ts-string"
                },
                {
                  "include": "#array-literal"
                }
              ]
            },
            {
              "include": "#angular-expression"
            }
          ]
        },
        {
          "name": "meta.object.member.ts",
          "begin": "(?x)(?:([_$[:alpha:]][_$[:alnum:]]*)\\s*(:)(?=\\s*( (async\\s+)|(function\\s*[(<])|(function\\s+)| ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)| ((<([^<>]|\\<[^<>]+\\>)+>\\s*)?\\(([^()]|\\([^()]*\\))*\\)(\\s*:\\s*(.)*)?\\s*=>))))",
          "beginCaptures": {
            "0": {
              "name": "meta.object-literal.key.ts"
            },
            "1": {
              "name": "entity.name.function.ts"
            },
            "2": {
              "name": "punctuation.separator.key-value.ts"
            }
          },
          "end": "(?=,|\\})",
          "patterns": [
            {
              "include": "#angular-expression"
            }
          ]
        },
        {
          "name": "meta.object.member.ts",
          "begin": "(?:[_$[:alpha:]][_$[:alnum:]]*)\\s*(:)",
          "beginCaptures": {
            "0": {
              "name": "meta.object-literal.key.ts"
            },
            "1": {
              "name": "punctuation.separator.key-value.ts"
            }
          },
          "end": "(?=,|\\})",
          "patterns": [
            {
              "include": "#angular-expression"
            }
          ]
        },
        {
          "name": "meta.object.member.ts",
          "match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=,|\\}|$)",
          "captures": {
            "1": {
              "name": "variable.other.readwrite.ts"
            }
          }
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "operator-navigator": {
      "match": "\\?\\.|\\!\\.|\\.|\\,|\\;|\\?|\\!|\\:",
      "name": "keyword.operator.punctuation html-template.ng.expression.operator.navigator"
    },
    "parameter-name": {
      "patterns": [
        {
          "match": "(?x)(?:\\s*\\b(readonly)\\s+)?(?:\\s*\\b(public|private|protected)\\s+)?(\\.\\.\\.)?\\s*(?<!=|:)([_$[:alpha:]][_$[:alnum:]]*)\\s*(\\??)(?=\\s* (=\\s*( (async\\s+) | (function\\s*[(<]) | (function\\s+) | ([_$[:alpha:]][_$[:alnum:]]*\\s*=>) | ((<([^<>]|\\<[^<>]+\\>)+>\\s*)?\\(([^()]|\\([^()]*\\))*\\)(\\s*:\\s*(.)*)?\\s*=>)) ) | (:\\s*( (<) | ([(]\\s*( ([)]) | (\\.\\.\\.) | ([_$[:alnum:]]+\\s*( ([:,?=])| ([)]\\s*=>) )) ))) ))",
          "captures": {
            "1": {
              "name": "storage.modifier.ts"
            },
            "2": {
              "name": "storage.modifier.ts"
            },
            "3": {
              "name": "keyword.operator.rest.ts"
            },
            "4": {
              "name": "entity.name.function.ts"
            },
            "5": {
              "name": "keyword.operator.optional.ts"
            }
          }
        },
        {
          "match": "(?:\\s*\\b(readonly)\\s+)?(?:\\s*\\b(public|private|protected)\\s+)?(\\.\\.\\.)?\\s*(?<!=|:)([_$[:alpha:]][_$[:alnum:]]*)\\s*(\\??)",
          "captures": {
            "1": {
              "name": "storage.modifier.ts"
            },
            "2": {
              "name": "storage.modifier.ts"
            },
            "3": {
              "name": "keyword.operator.rest.ts"
            },
            "4": {
              "name": "variable.parameter.ts"
            },
            "5": {
              "name": "keyword.operator.optional.ts"
            }
          }
        }
      ]
    },
    "paren-expression": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.round.ts"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "meta.brace.round.ts"
        }
      },
      "patterns": [
        {
          "include": "#angular-expression"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "punctuation-accessor": {
      "name": "punctuation.accessor.ts",
      "match": "\\?\\.|\\!\\.|\\."
    },
    "punctuation-comma": {
      "name": "punctuation.separator.comma.ts",
      "match": ","
    },
    "punctuation-semicolon": {
      "name": "punctuation.terminator.statement.ts",
      "match": ";"
    },
    "qstring-double": {
      "name": "string.quoted.double.ts",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.ts"
        }
      },
      "end": "(\")|((?:[^\\\\\\n])$)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.ts"
        },
        "2": {
          "name": "invalid.illegal.newline.ts"
        }
      },
      "patterns": [
        {
          "include": "#string-character-escape"
        }
      ]
    },
    "qstring-single": {
      "name": "string.quoted.single.ts",
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.ts"
        }
      },
      "end": "(\\')|((?:[^\\\\\\n])$)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.ts"
        },
        "2": {
          "name": "invalid.illegal.newline.ts"
        }
      },
      "patterns": [
        {
          "include": "#string-character-escape"
        }
      ]
    },
    "string-character-escape": {
      "name": "constant.character.escape.ts",
      "match": "\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
    },
    "ternary-expression": {
      "begin": "(?=\\?)(?!\\?\\.)",
      "end": "(?=$|\"|[;,})\\]])",
      "patterns": [
        {
          "include": "#ternary-operator"
        },
        {
          "include": "#angular-expression"
        }
      ]
    },
    "ternary-operator": {
      "begin": "(\\?)(?!\\.)",
      "beginCaptures": {
        "0": {
          "name": "keyword.operator.ternary.ts"
        }
      },
      "end": "(:)",
      "endCaptures": {
        "0": {
          "name": "keyword.operator.ternary.ts"
        }
      },
      "patterns": [
        {
          "include": "#angular-expression"
        }
      ]
    },
    "this-literal": {
      "name": "variable.language.this.ts",
      "match": "(?<!\\.|\\$)\\bthis\\b(?!\\$)"
    },
    "ts-string": {
      "patterns": [
        {
          "include": "#qstring-single"
        },
        {
          "include": "#qstring-double"
        }
      ]
    },
    "type-annotation": {
      "name": "meta.type.annotation.ts",
      "begin": ":",
      "beginCaptures": {
        "0": {
          "name": "keyword.operator.type.annotation.ts"
        }
      },
      "end": "(?=$|[,);\\}\\]]|//|\")|(?==[^>])|(?<=[\\}>\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)",
      "patterns": [
        {
          "include": "#type"
        }
      ]
    },
    "type-builtin-literals": {
      "name": "support.type.builtin.ts",
      "match": "(?<!\\.|\\$)\\b(this|true|false|undefined|null)\\b(?!\\$)"
    },
    "type-declaration": {
      "name": "meta.type.declaration.ts",
      "begin": "(?<!\\.|\\$)(?:(\\bexport)\\s+)?\\b(type)\\b\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.export.ts"
        },
        "2": {
          "name": "storage.type.type.ts"
        },
        "3": {
          "name": "entity.name.type.ts"
        }
      },
      "end": "(?=[};\"]|\\bvar\\b|\\blet\\b|\\bconst\\b|\\btype\\b|\\bfunction\\b|\\bclass\\b|\\binterface\\b|\\bnamespace\\b|\\bmodule\\b|\\bimport\\b|\\benum\\b|\\bdeclare\\b|\\bexport\\b|\\babstract\\b|\\basync\\b)",
      "patterns": [
        {
          "include": "#type"
        },
        {
          "match": "(=)\\s*",
          "captures": {
            "1": {
              "name": "keyword.operator.assignment.ts"
            }
          }
        }
      ]
    },
    "type-fn-type-parameters": {
      "patterns": [
        {
          "name": "meta.type.constructor.ts",
          "match": "(?<!\\.|\\$)\\b(new)\\b(?=\\s*\\<)",
          "captures": {
            "1": {
              "name": "keyword.control.new.ts"
            }
          }
        },
        {
          "name": "meta.type.constructor.ts",
          "begin": "(?<!\\.|\\$)\\b(new)\\b\\s*(?=\\()",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.new.ts"
            }
          },
          "end": "(?<=\\))",
          "patterns": [
            {
              "include": "#function-parameters"
            }
          ]
        },
        {
          "name": "meta.type.function.ts",
          "begin": "(?<=\\>)\\s*(?=\\()",
          "end": "(?<=\\))",
          "patterns": [
            {
              "include": "#function-parameters"
            }
          ]
        },
        {
          "name": "meta.type.function.ts",
          "begin": "(?x)( (?= [(]\\s*( ([)]) |  (\\.\\.\\.) | ([_$[:alnum:]]+\\s*( ([:,?=])| ([)]\\s*=>) )) ) ) )",
          "end": "(?<=\\))",
          "patterns": [
            {
              "include": "#function-parameters"
            }
          ]
        }
      ]
    },
    "type-name": {
      "patterns": [
        {
          "match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(\\?\\.|\\!\\.|\\.)",
          "captures": {
            "1": {
              "name": "entity.name.type.module.ts"
            },
            "2": {
              "name": "punctuation.accessor.ts"
            }
          }
        },
        {
          "name": "entity.name.type.ts",
          "match": "[_$[:alpha:]][_$[:alnum:]]*"
        }
      ]
    },
    "type-object-members": {
      "patterns": [
        {
          "include": "#type-annotation"
        },
        {
          "include": "#punctuation-comma"
        },
        {
          "include": "#punctuation-semicolon"
        }
      ]
    },
    "type-object": {
      "name": "meta.object.type.ts",
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.block.ts"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.ts"
        }
      },
      "patterns": [
        {
          "include": "#type-object-members"
        }
      ]
    },
    "type-operators": {
      "patterns": [
        {
          "include": "#typeof-operator"
        },
        {
          "name": "keyword.operator.type.ts",
          "match": "[&|]"
        },
        {
          "name": "keyword.operator.expression.keyof.ts",
          "match": "(?<!\\.|\\$)\\bkeyof\\b(?!\\$)"
        }
      ]
    },
    "type-paren-or-function-parameters": {
      "name": "meta.type.paren.cover.ts",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.round.ts"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "meta.brace.round.ts"
        }
      },
      "patterns": [
        {
          "include": "#type"
        },
        {
          "include": "#function-parameters"
        }
      ]
    },
    "type-tuple": {
      "name": "meta.type.tuple.ts",
      "begin": "\\[",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.square.ts"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "meta.brace.square.ts"
        }
      },
      "patterns": [
        {
          "include": "#type"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "type": {
      "name": "meta.type.ts",
      "patterns": [
        {
          "include": "#ts-string"
        },
        {
          "include": "#numeric-literal"
        },
        {
          "include": "#type-builtin-literals"
        },
        {
          "include": "#type-tuple"
        },
        {
          "include": "#type-object"
        },
        {
          "include": "#type-operators"
        },
        {
          "include": "#type-fn-type-parameters"
        },
        {
          "include": "#type-paren-or-function-parameters"
        },
        {
          "include": "#type-name"
        }
      ]
    },
    "typeof-operator": {
      "name": "keyword.operator.expression.typeof.ts",
      "match": "(?<!\\.|\\$)\\btypeof\\b(?!\\$)"
    },
    "undefined-literal": {
      "name": "constant.language.undefined.ts",
      "match": "(?<!\\.|\\$)\\bundefined\\b(?!\\$)"
    },
    "var-expr": {
      "name": "meta.var.expr.ts",
      "begin": "(?<!\\.|\\$)(?:(\\bexport)\\s+)?\\b(var|let|const(?!\\s+enum\\b))\\b(?!\\$)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.export.ts"
        },
        "2": {
          "name": "storage.type.ts"
        }
      },
      "end": "(?=$|;|\"|}|(\\s+(of|in)\\s+))",
      "patterns": [
        {
          "include": "#var-single-variable"
        },
        {
          "include": "#variable-initializer"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "var-keywords": {
      "match": "\\blet\\b\\s",
      "name": "storage.type.ts"
    },
    "var-single-variable": {
      "patterns": [
        {
          "name": "meta.var-single-variable.expr.ts",
          "begin": "(?x)([_$[:alpha:]][_$[:alnum:]]*)(?=\\s* (=\\s*( (async\\s+) | (function\\s*[(<]) | (function\\s+) | ([_$[:alpha:]][_$[:alnum:]]*\\s*=>) | ((<([^<>]|\\<[^<>]+\\>)+>\\s*)?\\(([^()]|\\([^()]*\\))*\\)(\\s*:\\s*(.)*)?\\s*=>)) ) | (:\\s*( (<) | ([(]\\s*( ([)]) | (\\.\\.\\.) | ([_$[:alnum:]]+\\s*( ([:,?=])| ([)]\\s*=>) )) ))) ))",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.ts"
            }
          },
          "end": "(?=$|\"|[;,=}]|(\\s+(of|in)\\s+))",
          "patterns": [
            {
              "include": "#type-annotation"
            },
            {
              "include": "#ts-string"
            }
          ]
        },
        {
          "name": "meta.var-single-variable.expr.ts",
          "begin": "([_$[:alpha:]][_$[:alnum:]]*)",
          "beginCaptures": {
            "1": {
              "name": "variable.other.readwrite.ts"
            }
          },
          "end": "(?=$|\"|[;,=}]|(\\s+(of|in)\\s+))",
          "patterns": [
            {
              "include": "#type-annotation"
            },
            {
              "include": "#ts-string"
            }
          ]
        }
      ]
    },
    "variable-initializer": {
      "begin": "(?<!=|!)(=)(?!=)",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.assignment.ts"
        }
      },
      "end": "(?=$|[,);}\\]])",
      "patterns": [
        {
          "include": "#angular-expression"
        }
      ]
    },
    "angular-interpolations": {
      "patterns": [
        {
          "beginCaptures": {
            "0": {
              "name": "expression.ng"
            },
            "1": {
              "name": "punctuation.definition.block.ts html-template.ng.interpolation.begin"
            }
          },
          "patterns": [
            {
              "match": "\\?\\.|\\!\\.|\\.|\\!|\\?|\\:",
              "name": "keyword.operator.navigation html-template.ng.expression.operator.navigator"
            },
            {
              "include": "#angular-expression"
            }
          ],
          "begin": "(\\{\\{\\{?)",
          "endCaptures": {
            "0": {
              "name": "expression.ng"
            },
            "1": {
              "name": "punctuation.definition.block.ts html-template.ng.interpolation.end"
            }
          },
          "end": "(\\}\\}\\}?)",
          "name": "expression.ng html-template.ng.interpolation.expression"
        }
      ]
    },
    "tag-script": {
      "begin": "(^[\\t]+)?(?=<(?i:script)\\b(?!-))",
      "beginCaptures": {
        "1": {
          "name": "punctuation.whitespace.embedded.leading.html"
        }
      },
      "end": "(</)[\\s]*((?i:script))[\\s]*(>)\\n?",
      "endCaptures": {
        "0": {
          "name": "meta.tag.metadata.script.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "meta.tag.metadata.html entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "begin": "(<)((?i:script))(>)",
          "beginCaptures": {
            "0": {
              "name": "meta.tag.metadata.script.start.html"
            },
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html html-template.tag.html"
            },
            "3": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "end": "(?=(?=<(?=/(?=script(?=>)))))",
          "name": "source.js",
          "patterns": [
            {
              "include": "#cdata"
            },
            {
              "include": "source.js"
            }
          ]
        },
        {
          "begin": "(<)((?i:script))\\b",
          "beginCaptures": {
            "0": {
              "name": "meta.tag.metadata.script.start.html"
            },
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html html-template.tag.html"
            }
          },
          "end": "(?=(?=<(?=/(?=script(?=>)))))",
          "patterns": [
            {
              "begin": "\\G",
              "end": "(?=<(?=/(?=script(?=>))))",
              "patterns": [
                {
                  "begin": "(?=(type(?=[\\s=]['\"](text/(typescript|x-typescript)|application/((x-)?typescript))[\\s\"'])|(lang(?=[\\s=]['\"]typescript[\\s\"']))))",
                  "end": "(?=<(?=/(?=script>)))",
                  "patterns": [
                    {
                      "begin": "\\G",
                      "end": "(?=<(?=/script>))",
                      "patterns": [
                        {
                          "begin": "\\G",
                          "end": "(>)",
                          "endCaptures": {
                            "1": {
                              "name": "punctuation.definition.tag.end.html"
                            }
                          },
                          "name": "meta.tag.metadata.script.start.html",
                          "patterns": [
                            {
                              "include": "#script-type-attribute"
                            },
                            {
                              "include": "#tag-stuff"
                            }
                          ]
                        },
                        {
                          "begin": "(?!\\G)",
                          "end": "(?=</script>)",
                          "name": "source.ts",
                          "patterns": [
                            {
                              "include": "#cdata"
                            },
                            {
                              "include": "source.ts"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "begin": "(?=(type(?=[\\s=]['\"]((module)|(text/(ecmascript|x-ecmascript|javascript|x-javascript)|application/((x-)?javascript|ecmascript)))[\\s\"'])|(lang(?=[\\s=]['\"]javascript[\\s\"']))))",
                  "end": "(?=<(?=/(?=script>)))",
                  "patterns": [
                    {
                      "begin": "\\G",
                      "end": "(?=<(?=/script>))",
                      "patterns": [
                        {
                          "begin": "\\G",
                          "end": "(>)",
                          "endCaptures": {
                            "1": {
                              "name": "punctuation.definition.tag.end.html"
                            }
                          },
                          "name": "meta.tag.metadata.script.start.html",
                          "patterns": [
                            {
                              "include": "#script-type-attribute"
                            },
                            {
                              "include": "#tag-stuff"
                            }
                          ]
                        },
                        {
                          "begin": "(?!\\G)",
                          "end": "(?=</script>)",
                          "name": "source.js",
                          "patterns": [
                            {
                              "include": "#cdata"
                            },
                            {
                              "include": "source.js"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "begin": "(?=(type(?=[\\s=]['\"](text/(coffeescript|x-coffeescript)|application/((x-)?coffeescript))[\\s\"'])|(lang(?=[\\s=]['\"]coffeescript[\\s\"']))))",
                  "end": "(?=<(?=/(?=script>)))",
                  "patterns": [
                    {
                      "begin": "\\G",
                      "end": "(?=<(?=/script>))",
                      "patterns": [
                        {
                          "begin": "\\G",
                          "end": "(>)",
                          "endCaptures": {
                            "1": {
                              "name": "punctuation.definition.tag.end.html"
                            }
                          },
                          "name": "meta.tag.metadata.script.start.html",
                          "patterns": [
                            {
                              "include": "#script-type-attribute"
                            },
                            {
                              "include": "#tag-stuff"
                            }
                          ]
                        },
                        {
                          "begin": "(?!\\G)",
                          "end": "(?=</script>)",
                          "name": "source.coffee",
                          "patterns": [
                            {
                              "include": "#cdata"
                            },
                            {
                              "include": "source.coffee"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "begin": "(?=(type(?=[\\s=]['\"](text/(dart|x-dart)|application/((x-)?dart))[\\s\"'])|(lang(?=[\\s=]['\"]dart[\\s\"']))))",
                  "end": "(?=<(?=/(?=script>)))",
                  "patterns": [
                    {
                      "begin": "\\G",
                      "end": "(?=<(?=/script>))",
                      "patterns": [
                        {
                          "begin": "\\G",
                          "end": "(>)",
                          "endCaptures": {
                            "1": {
                              "name": "punctuation.definition.tag.end.html"
                            }
                          },
                          "name": "meta.tag.metadata.script.start.html",
                          "patterns": [
                            {
                              "include": "#script-type-attribute"
                            },
                            {
                              "include": "#tag-stuff"
                            }
                          ]
                        },
                        {
                          "begin": "(?!\\G)",
                          "end": "(?=</script>)",
                          "name": "source.dart",
                          "patterns": [
                            {
                              "include": "#cdata"
                            },
                            {
                              "include": "source.dart"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "include": "#tag-stuff"
                }
              ]
            }
          ]
        }
      ]
    },
    "tag-style": {
      "begin": "(^[\\t]+)?(?=<(?i:style)\\b(?!-))",
      "beginCaptures": {
        "1": {
          "name": "punctuation.whitespace.embedded.leading.html"
        }
      },
      "end": "(</)[\\s]*((?i:style))[\\s]*(>)\\n?",
      "endCaptures": {
        "0": {
          "name": "meta.tag.metadata.style.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "meta.tag.metadata.html entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "begin": "(<)((?i:style))(>)",
          "beginCaptures": {
            "0": {
              "name": "meta.tag.metadata.style.start.html"
            },
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html"
            },
            "3": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "end": "(?=(?=<(?=/(?=style(?=>)))))",
          "name": "source.css",
          "patterns": [
            {
              "include": "#cdata"
            },
            {
              "include": "source.css"
            }
          ]
        },
        {
          "begin": "(<)((?i:style))\\b",
          "beginCaptures": {
            "0": {
              "name": "meta.tag.metadata.style.start.html"
            },
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html"
            }
          },
          "end": "(?=(?=<(?=/(?=style(?=>)))))",
          "patterns": [
            {
              "begin": "\\G",
              "end": "(?=<(?=/(?=style(?=>))))",
              "patterns": [
                {
                  "begin": "(?=(type(?=[\\s=]['\"](text/css[\\s\"'>]))|(lang(?=[\\s=]['\"]css[\\s\"'>]))))",
                  "end": "(?=<(?=/(?=style>)))",
                  "patterns": [
                    {
                      "begin": "\\G",
                      "end": "(?=<(?=/style>))",
                      "patterns": [
                        {
                          "begin": "\\G",
                          "end": "(>)",
                          "endCaptures": {
                            "1": {
                              "name": "punctuation.definition.tag.end.html"
                            }
                          },
                          "name": "meta.tag.metadata.style.start.html",
                          "patterns": [
                            {
                              "include": "#style-type-attribute"
                            },
                            {
                              "include": "#tag-stuff"
                            }
                          ]
                        },
                        {
                          "begin": "(?!\\G)",
                          "end": "(?=</style>)",
                          "name": "source.css",
                          "patterns": [
                            {
                              "include": "#cdata"
                            },
                            {
                              "include": "source.css"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "begin": "(?=(type(?=[\\s=]['\"](text/less[\\s\"'>]))|(lang(?=[\\s=]['\"]less[\\s\"'>]))))",
                  "end": "(?=<(?=/(?=style>)))",
                  "patterns": [
                    {
                      "begin": "\\G",
                      "end": "(?=<(?=/style>))",
                      "patterns": [
                        {
                          "begin": "\\G",
                          "end": "(>)",
                          "endCaptures": {
                            "1": {
                              "name": "punctuation.definition.tag.end.html"
                            }
                          },
                          "name": "meta.tag.metadata.style.start.html",
                          "patterns": [
                            {
                              "include": "#style-type-attribute"
                            },
                            {
                              "include": "#tag-stuff"
                            }
                          ]
                        },
                        {
                          "begin": "(?!\\G)",
                          "end": "(?=</style>)",
                          "name": "source.css.less",
                          "patterns": [
                            {
                              "include": "#cdata"
                            },
                            {
                              "include": "source.css.less"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "begin": "(?=(type(?=[\\s=]['\"](text/postcss[\\s\"'>]))|(lang(?=[\\s=]['\"]postcss[\\s\"'>]))))",
                  "end": "(?=<(?=/(?=style>)))",
                  "patterns": [
                    {
                      "begin": "\\G",
                      "end": "(?=<(?=/style>))",
                      "patterns": [
                        {
                          "begin": "\\G",
                          "end": "(>)",
                          "endCaptures": {
                            "1": {
                              "name": "punctuation.definition.tag.end.html"
                            }
                          },
                          "name": "meta.tag.metadata.style.start.html",
                          "patterns": [
                            {
                              "include": "#style-type-attribute"
                            },
                            {
                              "include": "#tag-stuff"
                            }
                          ]
                        },
                        {
                          "begin": "(?!\\G)",
                          "end": "(?=</style>)",
                          "name": "source.postcss",
                          "patterns": [
                            {
                              "include": "#cdata"
                            },
                            {
                              "include": "source.postcss"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "begin": "(?=(type(?=[\\s=]['\"](text/sass[\\s\"'>]))|(lang(?=[\\s=]['\"]sass[\\s\"'>]))))",
                  "end": "(?=<(?=/(?=style>)))",
                  "patterns": [
                    {
                      "begin": "\\G",
                      "end": "(?=<(?=/style>))",
                      "patterns": [
                        {
                          "begin": "\\G",
                          "end": "(>)",
                          "endCaptures": {
                            "1": {
                              "name": "punctuation.definition.tag.end.html"
                            }
                          },
                          "name": "meta.tag.metadata.style.start.html",
                          "patterns": [
                            {
                              "include": "#style-type-attribute"
                            },
                            {
                              "include": "#tag-stuff"
                            }
                          ]
                        },
                        {
                          "begin": "(?!\\G)",
                          "end": "(?=</style>)",
                          "name": "source.sass",
                          "patterns": [
                            {
                              "include": "#cdata"
                            },
                            {
                              "include": "source.sass"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "begin": "(?=(type(?=[\\s=]['\"](text/scss[\\s\"'>]))|(lang(?=[\\s=]['\"]scss[\\s\"'>]))))",
                  "end": "(?=<(?=/(?=style>)))",
                  "patterns": [
                    {
                      "begin": "\\G",
                      "end": "(?=<(?=/style>))",
                      "patterns": [
                        {
                          "begin": "\\G",
                          "end": "(>)",
                          "endCaptures": {
                            "1": {
                              "name": "punctuation.definition.tag.end.html"
                            }
                          },
                          "name": "meta.tag.metadata.style.start.html",
                          "patterns": [
                            {
                              "include": "#style-type-attribute"
                            },
                            {
                              "include": "#tag-stuff"
                            }
                          ]
                        },
                        {
                          "begin": "(?!\\G)",
                          "end": "(?=</style>)",
                          "name": "source.css.scss",
                          "patterns": [
                            {
                              "include": "#cdata"
                            },
                            {
                              "include": "source.css.scss"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "begin": "(?=(type(?=[\\s=]['\"](text/styl(us)?[\\s\"'>]))|(lang(?=[\\s=]['\"]styl(us)?[\\s\"'>]))))",
                  "end": "(?=<(?=/(?=style>)))",
                  "patterns": [
                    {
                      "begin": "\\G",
                      "end": "(?=<(?=/style>))",
                      "patterns": [
                        {
                          "begin": "\\G",
                          "end": "(>)",
                          "endCaptures": {
                            "1": {
                              "name": "punctuation.definition.tag.end.html"
                            }
                          },
                          "name": "meta.tag.metadata.style.start.html",
                          "patterns": [
                            {
                              "include": "#style-type-attribute"
                            },
                            {
                              "include": "#tag-stuff"
                            }
                          ]
                        },
                        {
                          "begin": "(?!\\G)",
                          "end": "(?=</style>)",
                          "name": "source.stylus",
                          "patterns": [
                            {
                              "include": "#cdata"
                            },
                            {
                              "include": "source.stylus"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "include": "#tag-stuff"
                }
              ]
            }
          ]
        }
      ]
    },
    "tag-deprecated-inline": {
      "beginCaptures": {
        "0": {
          "name": "meta.tag.inline.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "invalid.deprecated.tag"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.inline.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "begin": "(<\\/?)(acronym|big|font|strike|tt|u)\\b(:)?([\\w\\_$]+)?(?!(?:[\\w-]))\\b",
      "end": "(\\/?>)",
      "patterns": [
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-metadata-void": {
      "beginCaptures": {
        "0": {
          "name": "meta.tag.metadata.$2.void.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "invalid.deprecated.tag"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.metadata.$2.void.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "begin": "(<\\/?)(basefont|isindex)\\b(:)?([\\w\\_$]+)?(?!(?:[\\w-]))\\b",
      "end": "(\\/?>)",
      "patterns": [
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-object-void": {
      "beginCaptures": {
        "0": {
          "name": "meta.tag.object.$2.void.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "invalid.deprecated.tag"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.object.$2.void.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "begin": "(<\\/?)(frame)\\b(:)?([\\w\\_$]+)?(?!(?:[\\w-]))\\b",
      "end": "(\\/?>)",
      "patterns": [
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-object": {
      "beginCaptures": {
        "0": {
          "name": "meta.tag.object.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "invalid.deprecated.tag"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.object.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "begin": "(<\\/?)(applet)\\b(:)?([\\w\\_$]+)?(?!(?:[\\w-]))\\b",
      "end": "(\\/?>)",
      "patterns": [
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-other": {
      "beginCaptures": {
        "0": {
          "name": "meta.tag.other.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "invalid.deprecated.tag"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.other.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "begin": "(<\\/?)(dir)\\b(:)?([\\w\\_$]+)?(?!(?:[\\w-]))\\b",
      "end": "(\\/?>)",
      "patterns": [
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-structure": {
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "invalid.deprecated.tag"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "begin": "(<\\/?)(center|frameset|noframes)\\b(:)?([\\w\\_$]+)?(?!(?:[\\w-]))\\b",
      "end": "(\\/?>)",
      "patterns": [
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-other": {
      "beginCaptures": {
        "0": {
          "name": "meta.tag.other.svg.$2.begin.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "invalid.deprecated.tag"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.other.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "begin": "(<\\/?)(altGlyphItem|altGlyphDef|font-face-src)(?!(?:[\\w-]))\\b",
      "end": "(\\/?>)",
      "name": "invalid.deprecated.tag",
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.svg.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-a": {
      "begin": "(<\\/?)(a)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.inline.a.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.inline.a.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(charset|coords|rev|shape)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.a.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-area": {
      "begin": "(<\\/?)(area)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.inline.area.void.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.inline.area.void.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(nohref)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.area.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-br": {
      "begin": "(<\\/?)(br)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.inline.br.void.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.inline.br.void.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(clear)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.br.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-iframe": {
      "begin": "(<\\/?)(iframe)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.object.iframe.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.object.iframe.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(align|frameborder|longdesc|marginheight|marginwidth|scrolling)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.iframe.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-img": {
      "begin": "(<\\/?)(img)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.object.img.void.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.object.img.void.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(align|hspace|longdesc|name|vspace)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.img.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-object": {
      "begin": "(<\\/?)(object)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.object.object.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.object.object.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(archive|border|classid|codebase|codetype|declare|hspace|standby|vspace|align)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.object.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-param": {
      "begin": "(<\\/?)(param)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.object.param.void.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.object.param.void.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(type|valuetype)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.param.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-body": {
      "begin": "(<\\/?)(body)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.body.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.body.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(alink|background|bgcolor|link|vlink)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.body.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-caption": {
      "begin": "(<\\/?)(caption)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.caption.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.caption.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(align)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.caption.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-col": {
      "begin": "(<\\/?)(col)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.col.void.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.col.void.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(char|charoff|valign|width)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.col.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-colgroup": {
      "begin": "(<\\/?)(colgroup)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.colgroup.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.colgroup.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(align|char|charoff|valign|width)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.colgroup.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-div": {
      "begin": "(<\\/?)(div)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.div.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.div.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(align)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.div.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-dl": {
      "begin": "(<\\/?)(dl)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "\tmeta.tag.structure.dl.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "\tmeta.tag.structure.dl.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(compact)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.dl.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-h1": {
      "begin": "(<\\/?)(h1)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.h1.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.h1.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(align)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.h1.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-h2": {
      "begin": "(<\\/?)(h2)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.h2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.h2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(align)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.h2.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-h3": {
      "begin": "(<\\/?)(h3)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.h3.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.h3.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(align)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.h3.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-h4": {
      "begin": "(<\\/?)(h4)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.h4.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.h4.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(align)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.h4.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-h5": {
      "begin": "(<\\/?)(h5)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.h5.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.h5.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(align)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.h5.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-h6": {
      "begin": "(<\\/?)(h6)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.h6.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.h6.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(align)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.h6.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-head": {
      "begin": "(<\\/?)(head)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.head.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.head.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(profile)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.head.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-hr": {
      "begin": "(<\\/?)(hr)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.hr.void.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.hr.void.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(align|noshade|size|width)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.hr.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-html": {
      "begin": "(<\\/?)(html)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.html.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.html.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(version)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.html.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-input": {
      "begin": "(<\\/?)(input)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.input.void.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.input.void.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(align)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.input.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-legend": {
      "begin": "(<\\/?)(legend)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.legend.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.legend.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(align)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.legend.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-li": {
      "begin": "(<\\/?)(li)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.li.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.li.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(type)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.li.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-link": {
      "begin": "(<\\/?)(link)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.metadata.link.void.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.metadata.link.void.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(charset|rev|target)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.link.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#style-type-attribute"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-menu": {
      "begin": "(<\\/?)(menu)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.menu.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.menu.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(compact)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.menu.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-ol": {
      "begin": "(<\\/?)(ol)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.ol.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.ol.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(compact|type)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.ol.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-p": {
      "begin": "(<\\/?)(p)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.p.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.p.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(align)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.p.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-pre": {
      "begin": "(<\\/?)(pre)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.pre.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.pre.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(width)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.pre.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-table": {
      "begin": "(<\\/?)(table)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.table.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.table.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(bgcolor|border|cellpadding|cellspacing|frame|rules|scheme|width)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.table.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-tbody": {
      "begin": "(<\\/?)(tbody)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.tbody.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.tbody.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(align|char|charoff|valign)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.tbody.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-td": {
      "begin": "(<\\/?)(td)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.td.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.td.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(abbr|align|axis|bgcolor|char|charoff|nowrap|scope|valign|width)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.td.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-tfoot": {
      "begin": "(<\\/?)(tfoot)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.tfoot.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.tfoot.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(align|char|charoff|valign)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.tfoot.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-th": {
      "begin": "(<\\/?)(th)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.th.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.th.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(align|bgcolor|char|charoff|nowrap|valign|width)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.th.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-thead": {
      "begin": "(<\\/?)(thead)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.thead.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.thead.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(align|char|charoff|valign)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.thead.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-tr": {
      "begin": "(<\\/?)(tr)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.tr.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.tr.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(align|bgcolor|char|charoff|valign)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.tr.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-attribute-ul": {
      "begin": "(<\\/?)(ul)(?!-)\\b(:)?([\\w\\-\\_$]+)?",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.ul.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.html"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.ul.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.html",
          "match": "[\\s\\n\\r\\t]*(\\b(compact|type)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.ul.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-a": {
      "begin": "(<\\/?)((?i:a))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the a element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.inline.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.inline.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.inline.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(enable-background|requiredFeatures|xlink:arcrole|xlink:href|xlink:title|xlink:show|xlink:type|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.a.$1.svg"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-animate": {
      "begin": "(<\\/?)((?i:animate))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the animate element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.inline.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.inline.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "name": "meta.element.inline.svg.html",
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(attributeType|requiredFeatures|requiredFeatures|xlink:arcrole|xlink:href|xlink:title|xlink:type|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.animate.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-feConvolveMatrix": {
      "begin": "(<\\/?)((?i:feConvolveMatrix))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the feConvolveMatrix element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.inline.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.inline.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.inline.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(kernelUnitLength|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.feConvolveMatrix.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-mpath": {
      "begin": "(<\\/?)((?i:mpath))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the mpath element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.inline.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.inline.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.inline.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(xlink:arcrole|xlink:href|xlink:title|xlink:type|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.mpath.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-set": {
      "begin": "(<\\/?)((?i:set))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the set element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.inline.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.inline.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.inline.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(attributeType|requiredFeatures|xlink:arcrole|xlink:href|xlink:title|xlink:type|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.set.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-circle": {
      "begin": "(<\\/?)((?i:circle))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the circle element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.object.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.object.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.object.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(requiredFeatures|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.circle.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-ellipse": {
      "begin": "(<\\/?)((?i:ellipse))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the ellipse element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.object.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.object.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.object.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(requiredFeatures|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.ellipse.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-feImage": {
      "begin": "(<\\/?)((?i:feImage))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the feImage element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.object.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.object.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.object.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(xlink:arcrole|xlink:href|xlink:title|xlink:type|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.feImage.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-foreignObject": {
      "begin": "(<\\/?)((?i:foreignObject))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the foreignObject element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.object.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.object.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.object.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(clip|requiredFeatures|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.foreignObject.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-image": {
      "begin": "(<\\/?)((?i:image))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the image element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.object.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.object.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.object.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(clip|color-profile|requiredFeatures|xlink:arcrole|xlink:href|xlink:title|xlink:type|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.image.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-line": {
      "begin": "(<\\/?)((?i:line))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the line element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.object.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.object.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.object.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(requiredFeatures|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.line.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-path": {
      "begin": "(<\\/?)((?i:path))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the path element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.object.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.object.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.object.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(requiredFeatures|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.path.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-polygon": {
      "begin": "(<\\/?)((?i:polygon))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the polygon element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.object.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.object.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.object.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(requiredFeatures|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.polygon.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-polyline": {
      "begin": "(<\\/?)((?i:polyline))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the polyline element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.object.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.object.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.object.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(requiredFeatures|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.polyline.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-rect": {
      "begin": "(<\\/?)((?i:rect))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the rect element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.object.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.object.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.object.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(requiredFeatures|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.rect.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-symbol": {
      "begin": "(<\\/?)((?i:symbol))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the symbol element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.object.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.object.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.object.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(enable-background|clip|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.symbol.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-use": {
      "begin": "(<\\/?)((?i:use))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the use element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.object.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.object.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.object.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(requiredFeatures|xlink:arcrole|xlink:href|xlink:title|xlink:type|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.use.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-view": {
      "begin": "(<\\/?)((?i:view))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the view element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.object.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.object.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.object.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(zoomAndPan|viewTarget|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.view.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-animateTransform": {
      "begin": "(<\\/?)((?i:animateTransform))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the animateTransform element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.other.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.other.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.other.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(attributeType|requiredFeatures|xlink:arcrole|xlink:href|xlink:title|xlink:type|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.animateTransform.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-radialGradient": {
      "begin": "(<\\/?)((?i:radialGradient))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the radialGradient element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.structure.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(xlink:arcrole|xlink:href|xlink:title|xlink:type|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.radialGradient.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-tspan": {
      "begin": "(<\\/?)((?i:tspan))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the tspan element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.inline.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.tag.inline.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "name": "meta.element.inline.svg.html",
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(requiredFeatures|kerning|glyph-orientation-vertical|glyph-orientation-horizontal|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.tspan.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-animateMotion": {
      "begin": "(<\\/?)((?i:animateMotion))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the animateMotion element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.structure.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(requiredFeatures|requiredFeatures|xlink:arcrole|xlink:href|xlink:title|xlink:type|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.animateMotion.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-clipPath": {
      "begin": "(<\\/?)((?i:clipPath))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the clipPath element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.structure.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(requiredFeatures|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.clipPath.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-defs": {
      "begin": "(<\\/?)((?i:defs))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the defs element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.structure.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(requiredFeatures|enable-background|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.defs.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-feDiffuseLighting": {
      "begin": "(<\\/?)((?i:feDiffuseLighting))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the feDiffuseLighting element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.structure.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(kernelUnitLength|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.feDiffuseLighting.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-feSpecularLighting": {
      "begin": "(<\\/?)((?i:feSpecularLighting))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the feSpecularLighting element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.structure.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(kernelUnitLength|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.feSpecularLighting.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-filter": {
      "begin": "(<\\/?)((?i:filter))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the filter element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.structure.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(filterRes|xlink:arcrole|xlink:href|xlink:title|xlink:type|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.filter.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-g": {
      "begin": "(<\\/?)((?i:g))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the g element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.structure.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(requiredFeatures|enable-background|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.g.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-linearGradient": {
      "begin": "(<\\/?)((?i:linearGradient))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the linearGradient element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.structure.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(xlink:arcrole|xlink:href|xlink:title|xlink:type|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.linearGradient.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-marker": {
      "begin": "(<\\/?)((?i:marker))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the a element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.structure.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(enable-background|clip|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.marker.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-mask": {
      "begin": "(<\\/?)((?i:mask))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the mask element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.structure.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(requiredFeatures|enable-background|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.mask.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-pattern": {
      "begin": "(<\\/?)((?i:pattern))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the pattern element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.structure.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(clip|enable-background|requiredFeatures|xlink:arcrole|xlink:href|xlink:title|xlink:type|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.pattern.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-switch": {
      "begin": "(<\\/?)((?i:switch))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the switch element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.structure.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(enable-background|requiredFeatures|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.switch.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-text": {
      "begin": "(<\\/?)((?i:text))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the text element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.structure.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(requiredFeatures|kerning|glyph-orientation-vertical|glyph-orientation-horizontal|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.text.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-textPath": {
      "begin": "(<\\/?)((?i:textPath))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the textPath element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "entity.name.tag.html html-template.tag.svg"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.structure.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.structure.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(glyph-orientation-horizontal|glyph-orientation-vertical|requiredFeatures|kerning|xlink:arcrole|xlink:href|xlink:title|xlink:type|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.textPath.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-missing-glyph": {
      "begin": "(<\\/?)((?i:missing-glyph))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the missing-glyph element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.other.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "invalid.deprecated.tag"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.other.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.other.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(horiz-adv-x|vert-adv-y|enable-background|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.missing-glyph.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-altGlyph": {
      "begin": "(<\\/?)((?i:altGlyph))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the altGlyph element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.other.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "invalid.deprecated.tag"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.other.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.other.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(format|glyph-orientation-horizontal|glyphRef|kerning|requiredFeatures|glyph-orientation-vertical|xlink:arcrole|xlink:href|xlink:title|xlink:type|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.altGlyph.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-animateColor": {
      "begin": "(<\\/?)((?i:animateColor))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the animateColor element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.other.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "invalid.deprecated.tag"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.other.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.other.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(attributeType|requiredFeatures|requiredFeatures|xlink:arcrole|xlink:href|xlink:title|xlink:type|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.animateColor.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-cursor": {
      "begin": "(<\\/?)((?i:cursor))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the cursor element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.other.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "invalid.deprecated.tag"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.other.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.other.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(requiredFeatures|xlink:arcrole|xlink:href|xlink:title|xlink:type|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.cursor.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-font-face-format": {
      "begin": "(<\\/?)((?i:font-face-format))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the font-face-format element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.other.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "invalid.deprecated.tag"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.other.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.other.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(string|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.font-face-format.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-font-face-name": {
      "begin": "(<\\/?)((?i:font-face-name))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the font-face-name element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.other.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "invalid.deprecated.tag"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.other.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.other.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(name|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.font-face-name.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-font-face-uri": {
      "begin": "(<\\/?)((?i:font-face-uri))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the font-face-uri element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.other.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "invalid.deprecated.tag"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.other.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.other.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(xlink:arcrole|xlink:href|xlink:title|xlink:type|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.font-face-uri.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-font-face": {
      "begin": "(<\\/?)((?i:font-face))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the font-face element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.other.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "invalid.deprecated.tag"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.other.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.other.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(accent-height|alphabetic|ascent|bbox|cap-height|unicode-range|units-per-em|panose-1|stemv|stemh|slope|cap-height|x-height|descent|widths|ideographic|mathematical|hanging|v-ideographic|v-alphabetic|v-mathematical|v-hanging|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.font-face.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-font": {
      "begin": "(<\\/?)((?i:font))\\b(?![\\w\\-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the font element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.other.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "invalid.deprecated.tag"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.other.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.other.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(horiz-adv-x|horiz-origin-x|vert-adv-y|vert-origin-x|vert-origin-y|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.font.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-glyph": {
      "begin": "(<\\/?)((?i:glyph))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the glyph element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.other.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "invalid.deprecated.tag"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.other.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.other.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(arabic-form|enable-background|glyph-name|horiz-adv-x|orientation|unicode|vert-adv-y|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.glyph.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-hkern": {
      "begin": "(<\\/?)((?i:hkern))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the hkern element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.other.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "invalid.deprecated.tag"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.other.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.other.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(g1|g2|k|u1|u2|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.hkern.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-tref": {
      "begin": "(<\\/?)((?i:tref))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the tref element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.other.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "invalid.deprecated.tag"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.other.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.other.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(requiredFeatures|xlink:arcrole|xlink:href|xlink:title|xlink:type|glyph-orientation-vertical|kerning|glyph-orientation-horizontal|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.tref.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    },
    "tag-deprecated-svg-attribute-vkern": {
      "begin": "(<\\/?)((?i:vkern))\\b(?![\\w-])(:)?([\\w\\-\\_$]+)?\\b",
      "comment": "This refers only for the vkern element and it's attributes when within a SVG element",
      "end": "(\\/?>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.other.svg.$2.start.html"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "invalid.deprecated.tag"
        },
        "3": {
          "name": "entity.name.tag.html html-template.ng.tag.colon"
        },
        "4": {
          "name": "entity.name.tag.html html-template.ng.tag.suffix"
        }
      },
      "name": "meta.element.other.svg.html",
      "endCaptures": {
        "0": {
          "name": "meta.tag.other.svg.$2.end.html"
        },
        "1": {
          "name": "punctuation.definition.tag.end.html"
        }
      },
      "patterns": [
        {
          "name": "meta.attribute.$1.svg",
          "match": "[\\s\\n\\r\\t]*(\\b(g1|g2|k|u1|u2|xml:space|xml:lang|xml:base)\\b)(=)?",
          "captures": {
            "2": {
              "name": "invalid.deprecated.entity.other.attribute-name.html invalid.deprecated.vkern.$1"
            },
            "3": {
              "name": "punctuation.separator.key-value.html punctuation.separator.key-value.html-template.ng"
            }
          }
        },
        {
          "include": "#svg-non-string-attributes"
        },
        {
          "include": "#tag-stuff"
        }
      ]
    }
  }
}
